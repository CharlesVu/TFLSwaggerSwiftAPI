//
// TravelTimeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TravelTimeAPI {
    /**
     * enum for parameter direction
     */
    public enum Direction_travelTimeGetCompareOverlay: String { 
        case average = "Average"
        case from = "From"
        case to = "To"
    }

    /**
     Gets the TravelTime overlay.
     
     - parameter z: (path) The zoom level. 
     - parameter pinLat: (path) The latitude of the pin. 
     - parameter pinLon: (path) The longitude of the pin. 
     - parameter mapCenterLat: (path) The map center latitude. 
     - parameter mapCenterLon: (path) The map center longitude. 
     - parameter scenarioTitle: (query) The title of the scenario. 
     - parameter timeOfDayId: (query) The id for the time of day (AM/INTER/PM) 
     - parameter modeId: (query) The id of the mode. 
     - parameter width: (path) The width of the requested overlay. 
     - parameter height: (path) The height of the requested overlay. 
     - parameter direction: (query) The direction of travel. 
     - parameter travelTimeInterval: (query) The total minutes between the travel time bands 
     - parameter compareType: (query)  
     - parameter compareValue: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func travelTimeGetCompareOverlay(z: Int, pinLat: Double, pinLon: Double, mapCenterLat: Double, mapCenterLon: Double, scenarioTitle: String, timeOfDayId: String, modeId: String, width: Int, height: Int, direction: Direction_travelTimeGetCompareOverlay, travelTimeInterval: Int, compareType: String, compareValue: String, completion: @escaping ((_ data: SystemObject?,_ error: Error?) -> Void)) {
        travelTimeGetCompareOverlayWithRequestBuilder(z: z, pinLat: pinLat, pinLon: pinLon, mapCenterLat: mapCenterLat, mapCenterLon: mapCenterLon, scenarioTitle: scenarioTitle, timeOfDayId: timeOfDayId, modeId: modeId, width: width, height: height, direction: direction, travelTimeInterval: travelTimeInterval, compareType: compareType, compareValue: compareValue).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the TravelTime overlay.
     - GET /TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     
     - parameter z: (path) The zoom level. 
     - parameter pinLat: (path) The latitude of the pin. 
     - parameter pinLon: (path) The longitude of the pin. 
     - parameter mapCenterLat: (path) The map center latitude. 
     - parameter mapCenterLon: (path) The map center longitude. 
     - parameter scenarioTitle: (query) The title of the scenario. 
     - parameter timeOfDayId: (query) The id for the time of day (AM/INTER/PM) 
     - parameter modeId: (query) The id of the mode. 
     - parameter width: (path) The width of the requested overlay. 
     - parameter height: (path) The height of the requested overlay. 
     - parameter direction: (query) The direction of travel. 
     - parameter travelTimeInterval: (query) The total minutes between the travel time bands 
     - parameter compareType: (query)  
     - parameter compareValue: (query)  

     - returns: RequestBuilder<SystemObject> 
     */
    open class func travelTimeGetCompareOverlayWithRequestBuilder(z: Int, pinLat: Double, pinLon: Double, mapCenterLat: Double, mapCenterLon: Double, scenarioTitle: String, timeOfDayId: String, modeId: String, width: Int, height: Int, direction: Direction_travelTimeGetCompareOverlay, travelTimeInterval: Int, compareType: String, compareValue: String) -> RequestBuilder<SystemObject> {
        var path = "/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}"
        let zPreEscape = "\(z)"
        let zPostEscape = zPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{z}", with: zPostEscape, options: .literal, range: nil)
        let pinLatPreEscape = "\(pinLat)"
        let pinLatPostEscape = pinLatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pinLat}", with: pinLatPostEscape, options: .literal, range: nil)
        let pinLonPreEscape = "\(pinLon)"
        let pinLonPostEscape = pinLonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pinLon}", with: pinLonPostEscape, options: .literal, range: nil)
        let mapCenterLatPreEscape = "\(mapCenterLat)"
        let mapCenterLatPostEscape = mapCenterLatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mapCenterLat}", with: mapCenterLatPostEscape, options: .literal, range: nil)
        let mapCenterLonPreEscape = "\(mapCenterLon)"
        let mapCenterLonPostEscape = mapCenterLonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mapCenterLon}", with: mapCenterLonPostEscape, options: .literal, range: nil)
        let widthPreEscape = "\(width)"
        let widthPostEscape = widthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{width}", with: widthPostEscape, options: .literal, range: nil)
        let heightPreEscape = "\(height)"
        let heightPostEscape = heightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{height}", with: heightPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "scenarioTitle": scenarioTitle, 
            "timeOfDayId": timeOfDayId, 
            "modeId": modeId, 
            "direction": direction.rawValue, 
            "travelTimeInterval": travelTimeInterval.encodeToJSON(), 
            "compareType": compareType, 
            "compareValue": compareValue
        ])

        let requestBuilder: RequestBuilder<SystemObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_travelTimeGetOverlay: String { 
        case average = "Average"
        case from = "From"
        case to = "To"
    }

    /**
     Gets the TravelTime overlay.
     
     - parameter z: (path) The zoom level. 
     - parameter pinLat: (path) The latitude of the pin. 
     - parameter pinLon: (path) The longitude of the pin. 
     - parameter mapCenterLat: (path) The map center latitude. 
     - parameter mapCenterLon: (path) The map center longitude. 
     - parameter scenarioTitle: (query) The title of the scenario. 
     - parameter timeOfDayId: (query) The id for the time of day (AM/INTER/PM) 
     - parameter modeId: (query) The id of the mode. 
     - parameter width: (path) The width of the requested overlay. 
     - parameter height: (path) The height of the requested overlay. 
     - parameter direction: (query) The direction of travel. 
     - parameter travelTimeInterval: (query) The total minutes between the travel time bands 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func travelTimeGetOverlay(z: Int, pinLat: Double, pinLon: Double, mapCenterLat: Double, mapCenterLon: Double, scenarioTitle: String, timeOfDayId: String, modeId: String, width: Int, height: Int, direction: Direction_travelTimeGetOverlay, travelTimeInterval: Int, completion: @escaping ((_ data: SystemObject?,_ error: Error?) -> Void)) {
        travelTimeGetOverlayWithRequestBuilder(z: z, pinLat: pinLat, pinLon: pinLon, mapCenterLat: mapCenterLat, mapCenterLon: mapCenterLon, scenarioTitle: scenarioTitle, timeOfDayId: timeOfDayId, modeId: modeId, width: width, height: height, direction: direction, travelTimeInterval: travelTimeInterval).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the TravelTime overlay.
     - GET /TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     
     - parameter z: (path) The zoom level. 
     - parameter pinLat: (path) The latitude of the pin. 
     - parameter pinLon: (path) The longitude of the pin. 
     - parameter mapCenterLat: (path) The map center latitude. 
     - parameter mapCenterLon: (path) The map center longitude. 
     - parameter scenarioTitle: (query) The title of the scenario. 
     - parameter timeOfDayId: (query) The id for the time of day (AM/INTER/PM) 
     - parameter modeId: (query) The id of the mode. 
     - parameter width: (path) The width of the requested overlay. 
     - parameter height: (path) The height of the requested overlay. 
     - parameter direction: (query) The direction of travel. 
     - parameter travelTimeInterval: (query) The total minutes between the travel time bands 

     - returns: RequestBuilder<SystemObject> 
     */
    open class func travelTimeGetOverlayWithRequestBuilder(z: Int, pinLat: Double, pinLon: Double, mapCenterLat: Double, mapCenterLon: Double, scenarioTitle: String, timeOfDayId: String, modeId: String, width: Int, height: Int, direction: Direction_travelTimeGetOverlay, travelTimeInterval: Int) -> RequestBuilder<SystemObject> {
        var path = "/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}"
        let zPreEscape = "\(z)"
        let zPostEscape = zPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{z}", with: zPostEscape, options: .literal, range: nil)
        let pinLatPreEscape = "\(pinLat)"
        let pinLatPostEscape = pinLatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pinLat}", with: pinLatPostEscape, options: .literal, range: nil)
        let pinLonPreEscape = "\(pinLon)"
        let pinLonPostEscape = pinLonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pinLon}", with: pinLonPostEscape, options: .literal, range: nil)
        let mapCenterLatPreEscape = "\(mapCenterLat)"
        let mapCenterLatPostEscape = mapCenterLatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mapCenterLat}", with: mapCenterLatPostEscape, options: .literal, range: nil)
        let mapCenterLonPreEscape = "\(mapCenterLon)"
        let mapCenterLonPostEscape = mapCenterLonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mapCenterLon}", with: mapCenterLonPostEscape, options: .literal, range: nil)
        let widthPreEscape = "\(width)"
        let widthPostEscape = widthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{width}", with: widthPostEscape, options: .literal, range: nil)
        let heightPreEscape = "\(height)"
        let heightPostEscape = heightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{height}", with: heightPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "scenarioTitle": scenarioTitle, 
            "timeOfDayId": timeOfDayId, 
            "modeId": modeId, 
            "direction": direction.rawValue, 
            "travelTimeInterval": travelTimeInterval.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<SystemObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
