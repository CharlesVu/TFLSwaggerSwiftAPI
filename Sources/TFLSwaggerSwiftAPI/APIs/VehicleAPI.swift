//
// VehicleAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VehicleAPI {
    /**
     Gets the predictions for a given list of vehicle Id's.
     
     - parameter ids: (path) A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func vehicleGet(ids: [String], completion: @escaping ((_ data: [TflApiPresentationEntitiesPrediction]?,_ error: Error?) -> Void)) {
        vehicleGetWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the predictions for a given list of vehicle Id's.
     - GET /Vehicle/{ids}/Arrivals
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "modeName",
  "bearing" : "bearing",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "countdownServerAdjustment",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "lineId",
  "lineName" : "lineName",
  "destinationNaptanId" : "destinationNaptanId",
  "towards" : "towards",
  "currentLocation" : "currentLocation",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "naptanId",
  "destinationName" : "destinationName",
  "operationType" : 0,
  "stationName" : "stationName",
  "id" : "id",
  "vehicleId" : "vehicleId",
  "platformName" : "platformName",
  "timeToStation" : 6,
  "direction" : "direction",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "modeName" : "modeName",
  "bearing" : "bearing",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "countdownServerAdjustment",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "lineId",
  "lineName" : "lineName",
  "destinationNaptanId" : "destinationNaptanId",
  "towards" : "towards",
  "currentLocation" : "currentLocation",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "naptanId",
  "destinationName" : "destinationName",
  "operationType" : 0,
  "stationName" : "stationName",
  "id" : "id",
  "vehicleId" : "vehicleId",
  "platformName" : "platformName",
  "timeToStation" : 6,
  "direction" : "direction",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "modeName",
  "bearing" : "bearing",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "countdownServerAdjustment",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "lineId",
  "lineName" : "lineName",
  "destinationNaptanId" : "destinationNaptanId",
  "towards" : "towards",
  "currentLocation" : "currentLocation",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "naptanId",
  "destinationName" : "destinationName",
  "operationType" : 0,
  "stationName" : "stationName",
  "id" : "id",
  "vehicleId" : "vehicleId",
  "platformName" : "platformName",
  "timeToStation" : 6,
  "direction" : "direction",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "modeName" : "modeName",
  "bearing" : "bearing",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "countdownServerAdjustment",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "lineId",
  "lineName" : "lineName",
  "destinationNaptanId" : "destinationNaptanId",
  "towards" : "towards",
  "currentLocation" : "currentLocation",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "naptanId",
  "destinationName" : "destinationName",
  "operationType" : 0,
  "stationName" : "stationName",
  "id" : "id",
  "vehicleId" : "vehicleId",
  "platformName" : "platformName",
  "timeToStation" : 6,
  "direction" : "direction",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     
     - parameter ids: (path) A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. 

     - returns: RequestBuilder<[TflApiPresentationEntitiesPrediction]> 
     */
    open class func vehicleGetWithRequestBuilder(ids: [String]) -> RequestBuilder<[TflApiPresentationEntitiesPrediction]> {
        var path = "/Vehicle/{ids}/Arrivals"
        let idsPreEscape = "\(ids)"
        let idsPostEscape = idsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ids}", with: idsPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TflApiPresentationEntitiesPrediction]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the Emissions Surcharge compliance for the Vehicle
     
     - parameter vrm: (query) The Vehicle Registration Mark 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func vehicleGetEmissionsSurchargeCompliance(vrm: String, completion: @escaping ((_ data: TflApiPresentationEntitiesVehicleMatch?,_ error: Error?) -> Void)) {
        vehicleGetEmissionsSurchargeComplianceWithRequestBuilder(vrm: vrm).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the Emissions Surcharge compliance for the Vehicle
     - GET /Vehicle/EmissionSurcharge
     - examples: [{contentType=application/json, example={
  "vrm" : "vrm",
  "colour" : "colour",
  "compliance" : "NotAvailable",
  "model" : "model",
  "type" : "type",
  "make" : "make"
}}, {contentType=application/xml, example=<null>
  <vrm>aeiou</vrm>
  <type>aeiou</type>
  <make>aeiou</make>
  <model>aeiou</model>
  <colour>aeiou</colour>
  <compliance>aeiou</compliance>
</null>}]
     - examples: [{contentType=application/json, example={
  "vrm" : "vrm",
  "colour" : "colour",
  "compliance" : "NotAvailable",
  "model" : "model",
  "type" : "type",
  "make" : "make"
}}, {contentType=application/xml, example=<null>
  <vrm>aeiou</vrm>
  <type>aeiou</type>
  <make>aeiou</make>
  <model>aeiou</model>
  <colour>aeiou</colour>
  <compliance>aeiou</compliance>
</null>}]
     
     - parameter vrm: (query) The Vehicle Registration Mark 

     - returns: RequestBuilder<TflApiPresentationEntitiesVehicleMatch> 
     */
    open class func vehicleGetEmissionsSurchargeComplianceWithRequestBuilder(vrm: String) -> RequestBuilder<TflApiPresentationEntitiesVehicleMatch> {
        let path = "/Vehicle/EmissionSurcharge"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "vrm": vrm
        ])

        let requestBuilder: RequestBuilder<TflApiPresentationEntitiesVehicleMatch>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the Ulez Surcharge compliance for the Vehicle
     
     - parameter vrm: (query) The Vehicle Registration Mark 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func vehicleGetUlezCompliance(vrm: String, completion: @escaping ((_ data: TflApiPresentationEntitiesVehicleMatch?,_ error: Error?) -> Void)) {
        vehicleGetUlezComplianceWithRequestBuilder(vrm: vrm).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the Ulez Surcharge compliance for the Vehicle
     - GET /Vehicle/UlezCompliance
     - examples: [{contentType=application/json, example={
  "vrm" : "vrm",
  "colour" : "colour",
  "compliance" : "NotAvailable",
  "model" : "model",
  "type" : "type",
  "make" : "make"
}}, {contentType=application/xml, example=<null>
  <vrm>aeiou</vrm>
  <type>aeiou</type>
  <make>aeiou</make>
  <model>aeiou</model>
  <colour>aeiou</colour>
  <compliance>aeiou</compliance>
</null>}]
     - examples: [{contentType=application/json, example={
  "vrm" : "vrm",
  "colour" : "colour",
  "compliance" : "NotAvailable",
  "model" : "model",
  "type" : "type",
  "make" : "make"
}}, {contentType=application/xml, example=<null>
  <vrm>aeiou</vrm>
  <type>aeiou</type>
  <make>aeiou</make>
  <model>aeiou</model>
  <colour>aeiou</colour>
  <compliance>aeiou</compliance>
</null>}]
     
     - parameter vrm: (query) The Vehicle Registration Mark 

     - returns: RequestBuilder<TflApiPresentationEntitiesVehicleMatch> 
     */
    open class func vehicleGetUlezComplianceWithRequestBuilder(vrm: String) -> RequestBuilder<TflApiPresentationEntitiesVehicleMatch> {
        let path = "/Vehicle/UlezCompliance"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "vrm": vrm
        ])

        let requestBuilder: RequestBuilder<TflApiPresentationEntitiesVehicleMatch>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
