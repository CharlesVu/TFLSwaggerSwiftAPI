//
// ValidityPeriod.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Represents a period for which a planned works is valid. */

public struct ValidityPeriod: Codable {

    /** Gets or sets the start date. */
    public var fromDate: Date?
    /** Gets or sets the end date. */
    public var toDate: Date?
    /** If true is a realtime status rather than planned or info */
    public var isNow: Bool?

    public init(fromDate: Date?, toDate: Date?, isNow: Bool?) {
        self.fromDate = fromDate
        self.toDate = toDate
        self.isNow = isNow
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        isNow = try container.decode(Bool.self, forKey: .isNow)

        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale(identifier: "en_US_POSIX")
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"

        let fromDateString = try container.decode(String.self, forKey: .fromDate)

        if let date = dateFormatter.date(from: fromDateString) {
            fromDate = date
        } else {
            throw DecodingError.dataCorruptedError(forKey: .fromDate,
                                                   in: container,
                                                   debugDescription: "Date string does not match format expected by formatter.")
        }

        let toDateString = try container.decode(String.self, forKey: .toDate)
        if let date = dateFormatter.date(from: toDateString) {
            fromDate = date
        } else {
            throw DecodingError.dataCorruptedError(forKey: .toDate,
                                                   in: container,
                                                   debugDescription: "Date string does not match format expected by formatter.")
        }

    }


}

