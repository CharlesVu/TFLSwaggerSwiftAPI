//
// ModeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ModeAPI {
    /**
     Gets the next arrival predictions for all stops of a given mode
     
     - parameter mode: (path) A mode name e.g. tube, dlr 
     - parameter count: (query) A number of arrivals to return for each stop, -1 to return all available. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modeArrivals(mode: String, count: Int? = nil, completion: @escaping ((_ data: [TflApiPresentationEntitiesPrediction]?,_ error: Error?) -> Void)) {
        modeArrivalsWithRequestBuilder(mode: mode, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the next arrival predictions for all stops of a given mode
     - GET /Mode/{mode}/Arrivals
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "modeName",
  "bearing" : "bearing",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "countdownServerAdjustment",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "lineId",
  "lineName" : "lineName",
  "destinationNaptanId" : "destinationNaptanId",
  "towards" : "towards",
  "currentLocation" : "currentLocation",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "naptanId",
  "destinationName" : "destinationName",
  "operationType" : 0,
  "stationName" : "stationName",
  "id" : "id",
  "vehicleId" : "vehicleId",
  "platformName" : "platformName",
  "timeToStation" : 6,
  "direction" : "direction",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "modeName" : "modeName",
  "bearing" : "bearing",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "countdownServerAdjustment",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "lineId",
  "lineName" : "lineName",
  "destinationNaptanId" : "destinationNaptanId",
  "towards" : "towards",
  "currentLocation" : "currentLocation",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "naptanId",
  "destinationName" : "destinationName",
  "operationType" : 0,
  "stationName" : "stationName",
  "id" : "id",
  "vehicleId" : "vehicleId",
  "platformName" : "platformName",
  "timeToStation" : 6,
  "direction" : "direction",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "modeName",
  "bearing" : "bearing",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "countdownServerAdjustment",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "lineId",
  "lineName" : "lineName",
  "destinationNaptanId" : "destinationNaptanId",
  "towards" : "towards",
  "currentLocation" : "currentLocation",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "naptanId",
  "destinationName" : "destinationName",
  "operationType" : 0,
  "stationName" : "stationName",
  "id" : "id",
  "vehicleId" : "vehicleId",
  "platformName" : "platformName",
  "timeToStation" : 6,
  "direction" : "direction",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "modeName" : "modeName",
  "bearing" : "bearing",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "countdownServerAdjustment",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "lineId",
  "lineName" : "lineName",
  "destinationNaptanId" : "destinationNaptanId",
  "towards" : "towards",
  "currentLocation" : "currentLocation",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "naptanId",
  "destinationName" : "destinationName",
  "operationType" : 0,
  "stationName" : "stationName",
  "id" : "id",
  "vehicleId" : "vehicleId",
  "platformName" : "platformName",
  "timeToStation" : 6,
  "direction" : "direction",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     
     - parameter mode: (path) A mode name e.g. tube, dlr 
     - parameter count: (query) A number of arrivals to return for each stop, -1 to return all available. (optional)

     - returns: RequestBuilder<[TflApiPresentationEntitiesPrediction]> 
     */
    open class func modeArrivalsWithRequestBuilder(mode: String, count: Int? = nil) -> RequestBuilder<[TflApiPresentationEntitiesPrediction]> {
        var path = "/Mode/{mode}/Arrivals"
        let modePreEscape = "\(mode)"
        let modePostEscape = modePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mode}", with: modePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[TflApiPresentationEntitiesPrediction]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the service type active for a mode.              Currently only supports tube
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modeGetActiveServiceTypes(completion: @escaping ((_ data: [TflApiPresentationEntitiesActiveServiceType]?,_ error: Error?) -> Void)) {
        modeGetActiveServiceTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the service type active for a mode.              Currently only supports tube
     - GET /Mode/ActiveServiceTypes
     - examples: [{contentType=application/json, example=[ {
  "mode" : "mode",
  "serviceType" : "serviceType"
}, {
  "mode" : "mode",
  "serviceType" : "serviceType"
} ]}, {contentType=application/xml, example=<null>
  <mode>aeiou</mode>
  <serviceType>aeiou</serviceType>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "mode" : "mode",
  "serviceType" : "serviceType"
}, {
  "mode" : "mode",
  "serviceType" : "serviceType"
} ]}, {contentType=application/xml, example=<null>
  <mode>aeiou</mode>
  <serviceType>aeiou</serviceType>
</null>}]

     - returns: RequestBuilder<[TflApiPresentationEntitiesActiveServiceType]> 
     */
    open class func modeGetActiveServiceTypesWithRequestBuilder() -> RequestBuilder<[TflApiPresentationEntitiesActiveServiceType]> {
        let path = "/Mode/ActiveServiceTypes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TflApiPresentationEntitiesActiveServiceType]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
