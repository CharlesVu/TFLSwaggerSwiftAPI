//
// PlaceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PlaceAPI {
    /**
     Gets the place with the given id.
     
     - parameter _id: (path) The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids 
     - parameter includeChildren: (query) Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeGet(_id: String, includeChildren: Bool? = nil, completion: @escaping ((_ data: [TflApiPresentationEntitiesPlace]?,_ error: Error?) -> Void)) {
        placeGetWithRequestBuilder(_id: _id, includeChildren: includeChildren).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the place with the given id.
     - GET /Place/{id}
     - examples: [{contentType=application/json, example=[ {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
}, {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
}, {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     
     - parameter _id: (path) The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids 
     - parameter includeChildren: (query) Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)

     - returns: RequestBuilder<[TflApiPresentationEntitiesPlace]> 
     */
    open class func placeGetWithRequestBuilder(_id: String, includeChildren: Bool? = nil) -> RequestBuilder<[TflApiPresentationEntitiesPlace]> {
        var path = "/Place/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeChildren": includeChildren
        ])

        let requestBuilder: RequestBuilder<[TflApiPresentationEntitiesPlace]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     
     - parameter type: (path) The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) 
     - parameter lat: (query)  
     - parameter lon: (query)  
     - parameter locationLat: (query)  
     - parameter locationLon: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeGetAt(type: [String], lat: String, lon: String, locationLat: Double, locationLon: Double, completion: @escaping ((_ data: SystemObject?,_ error: Error?) -> Void)) {
        placeGetAtWithRequestBuilder(type: type, lat: lat, lon: lon, locationLat: locationLat, locationLon: locationLon).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     - GET /Place/{type}/At/{Lat}/{Lon}
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     
     - parameter type: (path) The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) 
     - parameter lat: (query)  
     - parameter lon: (query)  
     - parameter locationLat: (query)  
     - parameter locationLon: (query)  

     - returns: RequestBuilder<SystemObject> 
     */
    open class func placeGetAtWithRequestBuilder(type: [String], lat: String, lon: String, locationLat: Double, locationLon: Double) -> RequestBuilder<SystemObject> {
        var path = "/Place/{type}/At/{Lat}/{Lon}"
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "lat": lat, 
            "lon": lon, 
            "location.lat": locationLat, 
            "location.lon": locationLon
        ])

        let requestBuilder: RequestBuilder<SystemObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters              on type and can strip properties for a smaller payload.
     
     - parameter bbBoxpointsSwLat: (query)  
     - parameter bbBoxpointsSwLon: (query)  
     - parameter bbBoxpointsNeLat: (query)  
     - parameter bbBoxpointsNeLon: (query)  
     - parameter categories: (query) an optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     - parameter includeChildren: (query) Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     - parameter type: (query) place types to filter on, or null to return all types (optional)
     - parameter activeOnly: (query) An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeGetByGeoBox(bbBoxpointsSwLat: Double, bbBoxpointsSwLon: Double, bbBoxpointsNeLat: Double, bbBoxpointsNeLon: Double, categories: [String]? = nil, includeChildren: Bool? = nil, type: [String]? = nil, activeOnly: Bool? = nil, completion: @escaping ((_ data: [TflApiPresentationEntitiesStopPoint]?,_ error: Error?) -> Void)) {
        placeGetByGeoBoxWithRequestBuilder(bbBoxpointsSwLat: bbBoxpointsSwLat, bbBoxpointsSwLon: bbBoxpointsSwLon, bbBoxpointsNeLat: bbBoxpointsNeLat, bbBoxpointsNeLon: bbBoxpointsNeLon, categories: categories, includeChildren: includeChildren, type: type, activeOnly: activeOnly).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters              on type and can strip properties for a smaller payload.
     - GET /Place
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "indicator",
  "commonName" : "commonName",
  "modes" : [ "modes", "modes" ],
  "distance" : 9.369310271410669,
  "smsCode" : "smsCode",
  "lon" : 8.762042012749001,
  "children" : [ {
    "commonName" : "commonName",
    "placeType" : "placeType",
    "distance" : 0.8008281904610115,
    "children" : [ null, null ],
    "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
    "lon" : 1.4658129805029452,
    "id" : "id",
    "additionalProperties" : [ {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    }, {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    } ],
    "url" : "url",
    "lat" : 6.027456183070403
  }, {
    "commonName" : "commonName",
    "placeType" : "placeType",
    "distance" : 0.8008281904610115,
    "children" : [ null, null ],
    "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
    "lon" : 1.4658129805029452,
    "id" : "id",
    "additionalProperties" : [ {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    }, {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    } ],
    "url" : "url",
    "lat" : 6.027456183070403
  } ],
  "hubNaptanCode" : "hubNaptanCode",
  "stopLetter" : "stopLetter",
  "id" : "id",
  "platformName" : "platformName",
  "lines" : [ {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      }, {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "timeSlice",
        "value" : 7
      }, {
        "timeSlice" : "timeSlice",
        "value" : 7
      } ]
    },
    "name" : "name",
    "fullName" : "fullName",
    "id" : "id",
    "type" : "type",
    "uri" : "uri",
    "routeType" : "Unknown",
    "status" : "Unknown"
  }, {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      }, {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "timeSlice",
        "value" : 7
      }, {
        "timeSlice" : "timeSlice",
        "value" : 7
      } ]
    },
    "name" : "name",
    "fullName" : "fullName",
    "id" : "id",
    "type" : "type",
    "uri" : "uri",
    "routeType" : "Unknown",
    "status" : "Unknown"
  } ],
  "lat" : 6.683562403749608,
  "lineModeGroups" : [ {
    "modeName" : "modeName",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ]
  }, {
    "modeName" : "modeName",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ]
  } ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "stationNaptan" : "stationNaptan",
  "fullName" : "fullName",
  "stopType" : "stopType",
  "naptanMode" : "naptanMode",
  "url" : "url",
  "placeType" : "placeType",
  "naptanId" : "naptanId",
  "icsCode" : "icsCode",
  "lineGroup" : [ {
    "naptanIdReference" : "naptanIdReference",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ],
    "stationAtcoCode" : "stationAtcoCode"
  }, {
    "naptanIdReference" : "naptanIdReference",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ],
    "stationAtcoCode" : "stationAtcoCode"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "accessibilitySummary" : "accessibilitySummary",
  "status" : true
}, {
  "indicator" : "indicator",
  "commonName" : "commonName",
  "modes" : [ "modes", "modes" ],
  "distance" : 9.369310271410669,
  "smsCode" : "smsCode",
  "lon" : 8.762042012749001,
  "children" : [ {
    "commonName" : "commonName",
    "placeType" : "placeType",
    "distance" : 0.8008281904610115,
    "children" : [ null, null ],
    "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
    "lon" : 1.4658129805029452,
    "id" : "id",
    "additionalProperties" : [ {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    }, {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    } ],
    "url" : "url",
    "lat" : 6.027456183070403
  }, {
    "commonName" : "commonName",
    "placeType" : "placeType",
    "distance" : 0.8008281904610115,
    "children" : [ null, null ],
    "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
    "lon" : 1.4658129805029452,
    "id" : "id",
    "additionalProperties" : [ {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    }, {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    } ],
    "url" : "url",
    "lat" : 6.027456183070403
  } ],
  "hubNaptanCode" : "hubNaptanCode",
  "stopLetter" : "stopLetter",
  "id" : "id",
  "platformName" : "platformName",
  "lines" : [ {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      }, {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "timeSlice",
        "value" : 7
      }, {
        "timeSlice" : "timeSlice",
        "value" : 7
      } ]
    },
    "name" : "name",
    "fullName" : "fullName",
    "id" : "id",
    "type" : "type",
    "uri" : "uri",
    "routeType" : "Unknown",
    "status" : "Unknown"
  }, {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      }, {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "timeSlice",
        "value" : 7
      }, {
        "timeSlice" : "timeSlice",
        "value" : 7
      } ]
    },
    "name" : "name",
    "fullName" : "fullName",
    "id" : "id",
    "type" : "type",
    "uri" : "uri",
    "routeType" : "Unknown",
    "status" : "Unknown"
  } ],
  "lat" : 6.683562403749608,
  "lineModeGroups" : [ {
    "modeName" : "modeName",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ]
  }, {
    "modeName" : "modeName",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ]
  } ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "stationNaptan" : "stationNaptan",
  "fullName" : "fullName",
  "stopType" : "stopType",
  "naptanMode" : "naptanMode",
  "url" : "url",
  "placeType" : "placeType",
  "naptanId" : "naptanId",
  "icsCode" : "icsCode",
  "lineGroup" : [ {
    "naptanIdReference" : "naptanIdReference",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ],
    "stationAtcoCode" : "stationAtcoCode"
  }, {
    "naptanIdReference" : "naptanIdReference",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ],
    "stationAtcoCode" : "stationAtcoCode"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "accessibilitySummary" : "accessibilitySummary",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>aeiou</naptanId>
  <platformName>aeiou</platformName>
  <indicator>aeiou</indicator>
  <stopLetter>aeiou</stopLetter>
  <modes>aeiou</modes>
  <icsCode>aeiou</icsCode>
  <smsCode>aeiou</smsCode>
  <stopType>aeiou</stopType>
  <stationNaptan>aeiou</stationNaptan>
  <accessibilitySummary>aeiou</accessibilitySummary>
  <hubNaptanCode>aeiou</hubNaptanCode>
  <fullName>aeiou</fullName>
  <naptanMode>aeiou</naptanMode>
  <status>true</status>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "indicator",
  "commonName" : "commonName",
  "modes" : [ "modes", "modes" ],
  "distance" : 9.369310271410669,
  "smsCode" : "smsCode",
  "lon" : 8.762042012749001,
  "children" : [ {
    "commonName" : "commonName",
    "placeType" : "placeType",
    "distance" : 0.8008281904610115,
    "children" : [ null, null ],
    "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
    "lon" : 1.4658129805029452,
    "id" : "id",
    "additionalProperties" : [ {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    }, {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    } ],
    "url" : "url",
    "lat" : 6.027456183070403
  }, {
    "commonName" : "commonName",
    "placeType" : "placeType",
    "distance" : 0.8008281904610115,
    "children" : [ null, null ],
    "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
    "lon" : 1.4658129805029452,
    "id" : "id",
    "additionalProperties" : [ {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    }, {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    } ],
    "url" : "url",
    "lat" : 6.027456183070403
  } ],
  "hubNaptanCode" : "hubNaptanCode",
  "stopLetter" : "stopLetter",
  "id" : "id",
  "platformName" : "platformName",
  "lines" : [ {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      }, {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "timeSlice",
        "value" : 7
      }, {
        "timeSlice" : "timeSlice",
        "value" : 7
      } ]
    },
    "name" : "name",
    "fullName" : "fullName",
    "id" : "id",
    "type" : "type",
    "uri" : "uri",
    "routeType" : "Unknown",
    "status" : "Unknown"
  }, {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      }, {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "timeSlice",
        "value" : 7
      }, {
        "timeSlice" : "timeSlice",
        "value" : 7
      } ]
    },
    "name" : "name",
    "fullName" : "fullName",
    "id" : "id",
    "type" : "type",
    "uri" : "uri",
    "routeType" : "Unknown",
    "status" : "Unknown"
  } ],
  "lat" : 6.683562403749608,
  "lineModeGroups" : [ {
    "modeName" : "modeName",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ]
  }, {
    "modeName" : "modeName",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ]
  } ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "stationNaptan" : "stationNaptan",
  "fullName" : "fullName",
  "stopType" : "stopType",
  "naptanMode" : "naptanMode",
  "url" : "url",
  "placeType" : "placeType",
  "naptanId" : "naptanId",
  "icsCode" : "icsCode",
  "lineGroup" : [ {
    "naptanIdReference" : "naptanIdReference",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ],
    "stationAtcoCode" : "stationAtcoCode"
  }, {
    "naptanIdReference" : "naptanIdReference",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ],
    "stationAtcoCode" : "stationAtcoCode"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "accessibilitySummary" : "accessibilitySummary",
  "status" : true
}, {
  "indicator" : "indicator",
  "commonName" : "commonName",
  "modes" : [ "modes", "modes" ],
  "distance" : 9.369310271410669,
  "smsCode" : "smsCode",
  "lon" : 8.762042012749001,
  "children" : [ {
    "commonName" : "commonName",
    "placeType" : "placeType",
    "distance" : 0.8008281904610115,
    "children" : [ null, null ],
    "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
    "lon" : 1.4658129805029452,
    "id" : "id",
    "additionalProperties" : [ {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    }, {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    } ],
    "url" : "url",
    "lat" : 6.027456183070403
  }, {
    "commonName" : "commonName",
    "placeType" : "placeType",
    "distance" : 0.8008281904610115,
    "children" : [ null, null ],
    "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
    "lon" : 1.4658129805029452,
    "id" : "id",
    "additionalProperties" : [ {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    }, {
      "sourceSystemKey" : "sourceSystemKey",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "category",
      "value" : "value",
      "key" : "key"
    } ],
    "url" : "url",
    "lat" : 6.027456183070403
  } ],
  "hubNaptanCode" : "hubNaptanCode",
  "stopLetter" : "stopLetter",
  "id" : "id",
  "platformName" : "platformName",
  "lines" : [ {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      }, {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "timeSlice",
        "value" : 7
      }, {
        "timeSlice" : "timeSlice",
        "value" : 7
      } ]
    },
    "name" : "name",
    "fullName" : "fullName",
    "id" : "id",
    "type" : "type",
    "uri" : "uri",
    "routeType" : "Unknown",
    "status" : "Unknown"
  }, {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      }, {
        "naptanTo" : "naptanTo",
        "line" : "line",
        "timeSlice" : "timeSlice",
        "platformDirection" : "platformDirection",
        "value" : 1,
        "lineDirection" : "lineDirection",
        "direction" : "direction"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "timeSlice",
        "value" : 7
      }, {
        "timeSlice" : "timeSlice",
        "value" : 7
      } ]
    },
    "name" : "name",
    "fullName" : "fullName",
    "id" : "id",
    "type" : "type",
    "uri" : "uri",
    "routeType" : "Unknown",
    "status" : "Unknown"
  } ],
  "lat" : 6.683562403749608,
  "lineModeGroups" : [ {
    "modeName" : "modeName",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ]
  }, {
    "modeName" : "modeName",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ]
  } ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "stationNaptan" : "stationNaptan",
  "fullName" : "fullName",
  "stopType" : "stopType",
  "naptanMode" : "naptanMode",
  "url" : "url",
  "placeType" : "placeType",
  "naptanId" : "naptanId",
  "icsCode" : "icsCode",
  "lineGroup" : [ {
    "naptanIdReference" : "naptanIdReference",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ],
    "stationAtcoCode" : "stationAtcoCode"
  }, {
    "naptanIdReference" : "naptanIdReference",
    "lineIdentifier" : [ "lineIdentifier", "lineIdentifier" ],
    "stationAtcoCode" : "stationAtcoCode"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "accessibilitySummary" : "accessibilitySummary",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>aeiou</naptanId>
  <platformName>aeiou</platformName>
  <indicator>aeiou</indicator>
  <stopLetter>aeiou</stopLetter>
  <modes>aeiou</modes>
  <icsCode>aeiou</icsCode>
  <smsCode>aeiou</smsCode>
  <stopType>aeiou</stopType>
  <stationNaptan>aeiou</stationNaptan>
  <accessibilitySummary>aeiou</accessibilitySummary>
  <hubNaptanCode>aeiou</hubNaptanCode>
  <fullName>aeiou</fullName>
  <naptanMode>aeiou</naptanMode>
  <status>true</status>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     
     - parameter bbBoxpointsSwLat: (query)  
     - parameter bbBoxpointsSwLon: (query)  
     - parameter bbBoxpointsNeLat: (query)  
     - parameter bbBoxpointsNeLon: (query)  
     - parameter categories: (query) an optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     - parameter includeChildren: (query) Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     - parameter type: (query) place types to filter on, or null to return all types (optional)
     - parameter activeOnly: (query) An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)

     - returns: RequestBuilder<[TflApiPresentationEntitiesStopPoint]> 
     */
    open class func placeGetByGeoBoxWithRequestBuilder(bbBoxpointsSwLat: Double, bbBoxpointsSwLon: Double, bbBoxpointsNeLat: Double, bbBoxpointsNeLon: Double, categories: [String]? = nil, includeChildren: Bool? = nil, type: [String]? = nil, activeOnly: Bool? = nil) -> RequestBuilder<[TflApiPresentationEntitiesStopPoint]> {
        let path = "/Place"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "categories": categories, 
            "includeChildren": includeChildren, 
            "type": type, 
            "activeOnly": activeOnly, 
            "bbBoxpoints.swLat": bbBoxpointsSwLat, 
            "bbBoxpoints.swLon": bbBoxpointsSwLon, 
            "bbBoxpoints.neLat": bbBoxpointsNeLat, 
            "bbBoxpoints.neLon": bbBoxpointsNeLon
        ])

        let requestBuilder: RequestBuilder<[TflApiPresentationEntitiesStopPoint]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets all places of a given type
     
     - parameter types: (path) A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. 
     - parameter activeOnly: (query) An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeGetByType(types: [String], activeOnly: Bool? = nil, completion: @escaping ((_ data: [TflApiPresentationEntitiesPlace]?,_ error: Error?) -> Void)) {
        placeGetByTypeWithRequestBuilder(types: types, activeOnly: activeOnly).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets all places of a given type
     - GET /Place/Type/{types}
     - examples: [{contentType=application/json, example=[ {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
}, {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
}, {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     
     - parameter types: (path) A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. 
     - parameter activeOnly: (query) An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)

     - returns: RequestBuilder<[TflApiPresentationEntitiesPlace]> 
     */
    open class func placeGetByTypeWithRequestBuilder(types: [String], activeOnly: Bool? = nil) -> RequestBuilder<[TflApiPresentationEntitiesPlace]> {
        var path = "/Place/Type/{types}"
        let typesPreEscape = "\(types)"
        let typesPostEscape = typesPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{types}", with: typesPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "activeOnly": activeOnly
        ])

        let requestBuilder: RequestBuilder<[TflApiPresentationEntitiesPlace]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the place overlay for a given set of co-ordinates and a given width/height.
     
     - parameter z: (path) The zoom level 
     - parameter type: (path) The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) 
     - parameter width: (path) The width of the requested overlay. 
     - parameter height: (path) The height of the requested overlay. 
     - parameter lat: (query)  
     - parameter lon: (query)  
     - parameter locationLat: (query)  
     - parameter locationLon: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeGetOverlay(z: Int, type: [String], width: Int, height: Int, lat: String, lon: String, locationLat: Double, locationLon: Double, completion: @escaping ((_ data: SystemObject?,_ error: Error?) -> Void)) {
        placeGetOverlayWithRequestBuilder(z: z, type: type, width: width, height: height, lat: lat, lon: lon, locationLat: locationLat, locationLon: locationLon).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the place overlay for a given set of co-ordinates and a given width/height.
     - GET /Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     
     - parameter z: (path) The zoom level 
     - parameter type: (path) The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) 
     - parameter width: (path) The width of the requested overlay. 
     - parameter height: (path) The height of the requested overlay. 
     - parameter lat: (query)  
     - parameter lon: (query)  
     - parameter locationLat: (query)  
     - parameter locationLon: (query)  

     - returns: RequestBuilder<SystemObject> 
     */
    open class func placeGetOverlayWithRequestBuilder(z: Int, type: [String], width: Int, height: Int, lat: String, lon: String, locationLat: Double, locationLon: Double) -> RequestBuilder<SystemObject> {
        var path = "/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}"
        let zPreEscape = "\(z)"
        let zPostEscape = zPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{z}", with: zPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let widthPreEscape = "\(width)"
        let widthPostEscape = widthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{width}", with: widthPostEscape, options: .literal, range: nil)
        let heightPreEscape = "\(height)"
        let heightPostEscape = heightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{height}", with: heightPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "lat": lat, 
            "lon": lon, 
            "location.lat": locationLat, 
            "location.lon": locationLon
        ])

        let requestBuilder: RequestBuilder<SystemObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the set of streets associated with a post code.
     
     - parameter postcode: (query)  
     - parameter postcodeInputPostcode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeGetStreetsByPostCode(postcode: String, postcodeInputPostcode: String? = nil, completion: @escaping ((_ data: SystemObject?,_ error: Error?) -> Void)) {
        placeGetStreetsByPostCodeWithRequestBuilder(postcode: postcode, postcodeInputPostcode: postcodeInputPostcode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the set of streets associated with a post code.
     - GET /Place/Address/Streets/{Postcode}
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     
     - parameter postcode: (query)  
     - parameter postcodeInputPostcode: (query)  (optional)

     - returns: RequestBuilder<SystemObject> 
     */
    open class func placeGetStreetsByPostCodeWithRequestBuilder(postcode: String, postcodeInputPostcode: String? = nil) -> RequestBuilder<SystemObject> {
        let path = "/Place/Address/Streets/{Postcode}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "postcode": postcode, 
            "postcodeInput.postcode": postcodeInputPostcode
        ])

        let requestBuilder: RequestBuilder<SystemObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a list of all of the available place property categories and keys.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeMetaCategories(completion: @escaping ((_ data: [TflApiPresentationEntitiesPlaceCategory]?,_ error: Error?) -> Void)) {
        placeMetaCategoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of all of the available place property categories and keys.
     - GET /Place/Meta/Categories
     - examples: [{contentType=application/json, example=[ {
  "category" : "category",
  "availableKeys" : [ "availableKeys", "availableKeys" ]
}, {
  "category" : "category",
  "availableKeys" : [ "availableKeys", "availableKeys" ]
} ]}, {contentType=application/xml, example=<null>
  <category>aeiou</category>
  <availableKeys>aeiou</availableKeys>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "category" : "category",
  "availableKeys" : [ "availableKeys", "availableKeys" ]
}, {
  "category" : "category",
  "availableKeys" : [ "availableKeys", "availableKeys" ]
} ]}, {contentType=application/xml, example=<null>
  <category>aeiou</category>
  <availableKeys>aeiou</availableKeys>
</null>}]

     - returns: RequestBuilder<[TflApiPresentationEntitiesPlaceCategory]> 
     */
    open class func placeMetaCategoriesWithRequestBuilder() -> RequestBuilder<[TflApiPresentationEntitiesPlaceCategory]> {
        let path = "/Place/Meta/Categories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TflApiPresentationEntitiesPlaceCategory]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a list of the available types of Place.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeMetaPlaceTypes(completion: @escaping ((_ data: [TflApiPresentationEntitiesPlaceCategory]?,_ error: Error?) -> Void)) {
        placeMetaPlaceTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of the available types of Place.
     - GET /Place/Meta/PlaceTypes
     - examples: [{contentType=application/json, example=[ {
  "category" : "category",
  "availableKeys" : [ "availableKeys", "availableKeys" ]
}, {
  "category" : "category",
  "availableKeys" : [ "availableKeys", "availableKeys" ]
} ]}, {contentType=application/xml, example=<null>
  <category>aeiou</category>
  <availableKeys>aeiou</availableKeys>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "category" : "category",
  "availableKeys" : [ "availableKeys", "availableKeys" ]
}, {
  "category" : "category",
  "availableKeys" : [ "availableKeys", "availableKeys" ]
} ]}, {contentType=application/xml, example=<null>
  <category>aeiou</category>
  <availableKeys>aeiou</availableKeys>
</null>}]

     - returns: RequestBuilder<[TflApiPresentationEntitiesPlaceCategory]> 
     */
    open class func placeMetaPlaceTypesWithRequestBuilder() -> RequestBuilder<[TflApiPresentationEntitiesPlaceCategory]> {
        let path = "/Place/Meta/PlaceTypes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TflApiPresentationEntitiesPlaceCategory]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets all places that matches the given query
     
     - parameter name: (query) The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. 
     - parameter types: (query) A comma-separated list of the types to return. Max. approx 12 types. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeSearch(name: String, types: [String]? = nil, completion: @escaping ((_ data: [TflApiPresentationEntitiesPlace]?,_ error: Error?) -> Void)) {
        placeSearchWithRequestBuilder(name: name, types: types).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets all places that matches the given query
     - GET /Place/Search
     - examples: [{contentType=application/json, example=[ {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
}, {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
}, {
  "commonName" : "commonName",
  "placeType" : "placeType",
  "distance" : 0.8008281904610115,
  "children" : [ null, null ],
  "childrenUrls" : [ "childrenUrls", "childrenUrls" ],
  "lon" : 1.4658129805029452,
  "id" : "id",
  "additionalProperties" : [ {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  }, {
    "sourceSystemKey" : "sourceSystemKey",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "category",
    "value" : "value",
    "key" : "key"
  } ],
  "url" : "url",
  "lat" : 6.027456183070403
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     
     - parameter name: (query) The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. 
     - parameter types: (query) A comma-separated list of the types to return. Max. approx 12 types. (optional)

     - returns: RequestBuilder<[TflApiPresentationEntitiesPlace]> 
     */
    open class func placeSearchWithRequestBuilder(name: String, types: [String]? = nil) -> RequestBuilder<[TflApiPresentationEntitiesPlace]> {
        let path = "/Place/Search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "types": types
        ])

        let requestBuilder: RequestBuilder<[TflApiPresentationEntitiesPlace]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
