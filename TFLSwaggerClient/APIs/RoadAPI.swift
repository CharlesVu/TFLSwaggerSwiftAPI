//
// RoadAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class RoadAPI: APIBase {
    /**
     Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
     
     - parameter startDate: (query) Optional, the start time to filter on. 
     - parameter endDate: (query) Optional, The end time to filter on. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roadDisruptedStreets(startDate: Date, endDate: Date, completion: @escaping ((_ data: Object?,_ error: Error?) -> Void)) {
        roadDisruptedStreetsWithRequestBuilder(startDate: startDate, endDate: endDate).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
     - GET /Road/all/Street/Disruption
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     
     - parameter startDate: (query) Optional, the start time to filter on. 
     - parameter endDate: (query) Optional, The end time to filter on. 

     - returns: RequestBuilder<Object> 
     */
    open class func roadDisruptedStreetsWithRequestBuilder(startDate: Date, endDate: Date) -> RequestBuilder<Object> {
        let path = "/Road/all/Street/Disruption"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "startDate": startDate.encodeToJSON(),
            "endDate": endDate.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Object>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get active disruptions, filtered by road ids
     
     - parameter ids: (path) Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) 
     - parameter stripContent: (query) Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)
     - parameter severities: (query) an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)
     - parameter categories: (query) an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)
     - parameter closures: (query) Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roadDisruption(ids: [String], stripContent: Bool? = nil, severities: [String]? = nil, categories: [String]? = nil, closures: Bool? = nil, completion: @escaping ((_ data: [RoadDisruption]?,_ error: Error?) -> Void)) {
        roadDisruptionWithRequestBuilder(ids: ids, stripContent: stripContent, severities: severities, categories: categories, closures: closures).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get active disruptions, filtered by road ids
     - GET /Road/{ids}/Disruption
     - examples: [{contentType=application/json, example=[ {
  "subCategory" : "aeiou",
  "corridorIds" : [ "aeiou" ],
  "currentUpdate" : "aeiou",
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "streets" : [ {
    "directions" : "aeiou",
    "sourceSystemId" : 123456789,
    "sourceSystemKey" : "aeiou",
    "name" : "aeiou",
    "closure" : "aeiou",
    "segments" : [ {
      "toid" : "aeiou",
      "sourceSystemId" : 123456789,
      "sourceSystemKey" : "aeiou",
      "lineString" : "aeiou"
    } ]
  } ],
  "roadProject" : {
    "consultationStartDate" : "2000-01-23T04:56:07.000+00:00",
    "constructionStartDate" : "2000-01-23T04:56:07.000+00:00",
    "phase" : "aeiou",
    "projectPageUrl" : "aeiou",
    "consultationEndDate" : "2000-01-23T04:56:07.000+00:00",
    "cycleSuperhighwayId" : "aeiou",
    "contactEmail" : "aeiou",
    "consultationPageUrl" : "aeiou",
    "contactName" : "aeiou",
    "schemeName" : "aeiou",
    "projectSummaryPageUrl" : "aeiou",
    "externalPageUrl" : "aeiou",
    "boroughsBenefited" : [ "aeiou" ],
    "projectDescription" : "aeiou",
    "constructionEndDate" : "2000-01-23T04:56:07.000+00:00",
    "projectName" : "aeiou",
    "projectId" : "aeiou"
  },
  "currentUpdateDateTime" : "2000-01-23T04:56:07.000+00:00",
  "point" : "aeiou",
  "publishStartDate" : "2000-01-23T04:56:07.000+00:00",
  "levelOfInterest" : "aeiou",
  "geography" : {
    "geography" : {
      "wellKnownBinary" : "",
      "coordinateSystemId" : 123,
      "wellKnownText" : "aeiou"
    }
  },
  "linkUrl" : "aeiou",
  "id" : "aeiou",
  "severity" : "aeiou",
  "comments" : "aeiou",
  "isProvisional" : true,
  "linkText" : "aeiou",
  "endDateTime" : "2000-01-23T04:56:07.000+00:00",
  "hasClosures" : true,
  "url" : "aeiou",
  "timeFrame" : "aeiou",
  "roadDisruptionLines" : [ {
    "isDiversion" : true,
    "multiLineString" : "",
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "startTime" : "aeiou",
    "id" : 123,
    "roadDisruptionId" : "aeiou",
    "endTime" : "aeiou",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "startDateTime" : "2000-01-23T04:56:07.000+00:00",
  "roadDisruptionImpactAreas" : [ {
    "polygon" : "",
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "startTime" : "aeiou",
    "id" : 123,
    "roadDisruptionId" : "aeiou",
    "endTime" : "aeiou",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "publishEndDate" : "2000-01-23T04:56:07.000+00:00",
  "location" : "aeiou",
  "geometry" : "",
  "category" : "aeiou",
  "ordinal" : 123,
  "status" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <url>string</url>
  <point>string</point>
  <severity>string</severity>
  <ordinal>0</ordinal>
  <category>string</category>
  <subCategory>string</subCategory>
  <comments>string</comments>
  <currentUpdate>string</currentUpdate>
  <currentUpdateDateTime>2000-01-23T04:56:07.000Z</currentUpdateDateTime>
  <corridorIds>string</corridorIds>
  <startDateTime>2000-01-23T04:56:07.000Z</startDateTime>
  <endDateTime>2000-01-23T04:56:07.000Z</endDateTime>
  <lastModifiedTime>2000-01-23T04:56:07.000Z</lastModifiedTime>
  <levelOfInterest>string</levelOfInterest>
  <location>string</location>
  <status>string</status>
  <isProvisional>true</isProvisional>
  <hasClosures>true</hasClosures>
  <linkText>string</linkText>
  <linkUrl>string</linkUrl>
  <publishStartDate>2000-01-23T04:56:07.000Z</publishStartDate>
  <publishEndDate>2000-01-23T04:56:07.000Z</publishEndDate>
  <timeFrame>string</timeFrame>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "subCategory" : "aeiou",
  "corridorIds" : [ "aeiou" ],
  "currentUpdate" : "aeiou",
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "streets" : [ {
    "directions" : "aeiou",
    "sourceSystemId" : 123456789,
    "sourceSystemKey" : "aeiou",
    "name" : "aeiou",
    "closure" : "aeiou",
    "segments" : [ {
      "toid" : "aeiou",
      "sourceSystemId" : 123456789,
      "sourceSystemKey" : "aeiou",
      "lineString" : "aeiou"
    } ]
  } ],
  "roadProject" : {
    "consultationStartDate" : "2000-01-23T04:56:07.000+00:00",
    "constructionStartDate" : "2000-01-23T04:56:07.000+00:00",
    "phase" : "aeiou",
    "projectPageUrl" : "aeiou",
    "consultationEndDate" : "2000-01-23T04:56:07.000+00:00",
    "cycleSuperhighwayId" : "aeiou",
    "contactEmail" : "aeiou",
    "consultationPageUrl" : "aeiou",
    "contactName" : "aeiou",
    "schemeName" : "aeiou",
    "projectSummaryPageUrl" : "aeiou",
    "externalPageUrl" : "aeiou",
    "boroughsBenefited" : [ "aeiou" ],
    "projectDescription" : "aeiou",
    "constructionEndDate" : "2000-01-23T04:56:07.000+00:00",
    "projectName" : "aeiou",
    "projectId" : "aeiou"
  },
  "currentUpdateDateTime" : "2000-01-23T04:56:07.000+00:00",
  "point" : "aeiou",
  "publishStartDate" : "2000-01-23T04:56:07.000+00:00",
  "levelOfInterest" : "aeiou",
  "geography" : {
    "geography" : {
      "wellKnownBinary" : "",
      "coordinateSystemId" : 123,
      "wellKnownText" : "aeiou"
    }
  },
  "linkUrl" : "aeiou",
  "id" : "aeiou",
  "severity" : "aeiou",
  "comments" : "aeiou",
  "isProvisional" : true,
  "linkText" : "aeiou",
  "endDateTime" : "2000-01-23T04:56:07.000+00:00",
  "hasClosures" : true,
  "url" : "aeiou",
  "timeFrame" : "aeiou",
  "roadDisruptionLines" : [ {
    "isDiversion" : true,
    "multiLineString" : "",
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "startTime" : "aeiou",
    "id" : 123,
    "roadDisruptionId" : "aeiou",
    "endTime" : "aeiou",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "startDateTime" : "2000-01-23T04:56:07.000+00:00",
  "roadDisruptionImpactAreas" : [ {
    "polygon" : "",
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "startTime" : "aeiou",
    "id" : 123,
    "roadDisruptionId" : "aeiou",
    "endTime" : "aeiou",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "publishEndDate" : "2000-01-23T04:56:07.000+00:00",
  "location" : "aeiou",
  "geometry" : "",
  "category" : "aeiou",
  "ordinal" : 123,
  "status" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <url>string</url>
  <point>string</point>
  <severity>string</severity>
  <ordinal>0</ordinal>
  <category>string</category>
  <subCategory>string</subCategory>
  <comments>string</comments>
  <currentUpdate>string</currentUpdate>
  <currentUpdateDateTime>2000-01-23T04:56:07.000Z</currentUpdateDateTime>
  <corridorIds>string</corridorIds>
  <startDateTime>2000-01-23T04:56:07.000Z</startDateTime>
  <endDateTime>2000-01-23T04:56:07.000Z</endDateTime>
  <lastModifiedTime>2000-01-23T04:56:07.000Z</lastModifiedTime>
  <levelOfInterest>string</levelOfInterest>
  <location>string</location>
  <status>string</status>
  <isProvisional>true</isProvisional>
  <hasClosures>true</hasClosures>
  <linkText>string</linkText>
  <linkUrl>string</linkUrl>
  <publishStartDate>2000-01-23T04:56:07.000Z</publishStartDate>
  <publishEndDate>2000-01-23T04:56:07.000Z</publishEndDate>
  <timeFrame>string</timeFrame>
</null>}]
     
     - parameter ids: (path) Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) 
     - parameter stripContent: (query) Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets (optional)
     - parameter severities: (query) an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) (optional)
     - parameter categories: (query) an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) (optional)
     - parameter closures: (query) Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. (optional)

     - returns: RequestBuilder<[RoadDisruption]> 
     */
    open class func roadDisruptionWithRequestBuilder(ids: [String], stripContent: Bool? = nil, severities: [String]? = nil, categories: [String]? = nil, closures: Bool? = nil) -> RequestBuilder<[RoadDisruption]> {
        var path = "/Road/{ids}/Disruption"
        path = path.replacingOccurrences(of: "{ids}", with: "\(ids)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "stripContent": stripContent,
            "severities": severities,
            "categories": categories,
            "closures": closures
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[RoadDisruption]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets a list of active disruptions filtered by disruption Ids.
     
     - parameter disruptionIds: (path) Comma-separated list of disruption identifiers to filter by. 
     - parameter stripContent: (query) Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roadDisruptionById(disruptionIds: [String], stripContent: Bool? = nil, completion: @escaping ((_ data: RoadDisruption?,_ error: Error?) -> Void)) {
        roadDisruptionByIdWithRequestBuilder(disruptionIds: disruptionIds, stripContent: stripContent).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a list of active disruptions filtered by disruption Ids.
     - GET /Road/all/Disruption/{disruptionIds}
     - examples: [{contentType=application/json, example={
  "subCategory" : "aeiou",
  "corridorIds" : [ "aeiou" ],
  "currentUpdate" : "aeiou",
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "streets" : [ {
    "directions" : "aeiou",
    "sourceSystemId" : 123456789,
    "sourceSystemKey" : "aeiou",
    "name" : "aeiou",
    "closure" : "aeiou",
    "segments" : [ {
      "toid" : "aeiou",
      "sourceSystemId" : 123456789,
      "sourceSystemKey" : "aeiou",
      "lineString" : "aeiou"
    } ]
  } ],
  "roadProject" : {
    "consultationStartDate" : "2000-01-23T04:56:07.000+00:00",
    "constructionStartDate" : "2000-01-23T04:56:07.000+00:00",
    "phase" : "aeiou",
    "projectPageUrl" : "aeiou",
    "consultationEndDate" : "2000-01-23T04:56:07.000+00:00",
    "cycleSuperhighwayId" : "aeiou",
    "contactEmail" : "aeiou",
    "consultationPageUrl" : "aeiou",
    "contactName" : "aeiou",
    "schemeName" : "aeiou",
    "projectSummaryPageUrl" : "aeiou",
    "externalPageUrl" : "aeiou",
    "boroughsBenefited" : [ "aeiou" ],
    "projectDescription" : "aeiou",
    "constructionEndDate" : "2000-01-23T04:56:07.000+00:00",
    "projectName" : "aeiou",
    "projectId" : "aeiou"
  },
  "currentUpdateDateTime" : "2000-01-23T04:56:07.000+00:00",
  "point" : "aeiou",
  "publishStartDate" : "2000-01-23T04:56:07.000+00:00",
  "levelOfInterest" : "aeiou",
  "geography" : {
    "geography" : {
      "wellKnownBinary" : "",
      "coordinateSystemId" : 123,
      "wellKnownText" : "aeiou"
    }
  },
  "linkUrl" : "aeiou",
  "id" : "aeiou",
  "severity" : "aeiou",
  "comments" : "aeiou",
  "isProvisional" : true,
  "linkText" : "aeiou",
  "endDateTime" : "2000-01-23T04:56:07.000+00:00",
  "hasClosures" : true,
  "url" : "aeiou",
  "timeFrame" : "aeiou",
  "roadDisruptionLines" : [ {
    "isDiversion" : true,
    "multiLineString" : "",
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "startTime" : "aeiou",
    "id" : 123,
    "roadDisruptionId" : "aeiou",
    "endTime" : "aeiou",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "startDateTime" : "2000-01-23T04:56:07.000+00:00",
  "roadDisruptionImpactAreas" : [ {
    "polygon" : "",
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "startTime" : "aeiou",
    "id" : 123,
    "roadDisruptionId" : "aeiou",
    "endTime" : "aeiou",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "publishEndDate" : "2000-01-23T04:56:07.000+00:00",
  "location" : "aeiou",
  "geometry" : "",
  "category" : "aeiou",
  "ordinal" : 123,
  "status" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <id>string</id>
  <url>string</url>
  <point>string</point>
  <severity>string</severity>
  <ordinal>0</ordinal>
  <category>string</category>
  <subCategory>string</subCategory>
  <comments>string</comments>
  <currentUpdate>string</currentUpdate>
  <currentUpdateDateTime>2000-01-23T04:56:07.000Z</currentUpdateDateTime>
  <corridorIds>string</corridorIds>
  <startDateTime>2000-01-23T04:56:07.000Z</startDateTime>
  <endDateTime>2000-01-23T04:56:07.000Z</endDateTime>
  <lastModifiedTime>2000-01-23T04:56:07.000Z</lastModifiedTime>
  <levelOfInterest>string</levelOfInterest>
  <location>string</location>
  <status>string</status>
  <isProvisional>true</isProvisional>
  <hasClosures>true</hasClosures>
  <linkText>string</linkText>
  <linkUrl>string</linkUrl>
  <publishStartDate>2000-01-23T04:56:07.000Z</publishStartDate>
  <publishEndDate>2000-01-23T04:56:07.000Z</publishEndDate>
  <timeFrame>string</timeFrame>
</null>}]
     - examples: [{contentType=application/json, example={
  "subCategory" : "aeiou",
  "corridorIds" : [ "aeiou" ],
  "currentUpdate" : "aeiou",
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "streets" : [ {
    "directions" : "aeiou",
    "sourceSystemId" : 123456789,
    "sourceSystemKey" : "aeiou",
    "name" : "aeiou",
    "closure" : "aeiou",
    "segments" : [ {
      "toid" : "aeiou",
      "sourceSystemId" : 123456789,
      "sourceSystemKey" : "aeiou",
      "lineString" : "aeiou"
    } ]
  } ],
  "roadProject" : {
    "consultationStartDate" : "2000-01-23T04:56:07.000+00:00",
    "constructionStartDate" : "2000-01-23T04:56:07.000+00:00",
    "phase" : "aeiou",
    "projectPageUrl" : "aeiou",
    "consultationEndDate" : "2000-01-23T04:56:07.000+00:00",
    "cycleSuperhighwayId" : "aeiou",
    "contactEmail" : "aeiou",
    "consultationPageUrl" : "aeiou",
    "contactName" : "aeiou",
    "schemeName" : "aeiou",
    "projectSummaryPageUrl" : "aeiou",
    "externalPageUrl" : "aeiou",
    "boroughsBenefited" : [ "aeiou" ],
    "projectDescription" : "aeiou",
    "constructionEndDate" : "2000-01-23T04:56:07.000+00:00",
    "projectName" : "aeiou",
    "projectId" : "aeiou"
  },
  "currentUpdateDateTime" : "2000-01-23T04:56:07.000+00:00",
  "point" : "aeiou",
  "publishStartDate" : "2000-01-23T04:56:07.000+00:00",
  "levelOfInterest" : "aeiou",
  "geography" : {
    "geography" : {
      "wellKnownBinary" : "",
      "coordinateSystemId" : 123,
      "wellKnownText" : "aeiou"
    }
  },
  "linkUrl" : "aeiou",
  "id" : "aeiou",
  "severity" : "aeiou",
  "comments" : "aeiou",
  "isProvisional" : true,
  "linkText" : "aeiou",
  "endDateTime" : "2000-01-23T04:56:07.000+00:00",
  "hasClosures" : true,
  "url" : "aeiou",
  "timeFrame" : "aeiou",
  "roadDisruptionLines" : [ {
    "isDiversion" : true,
    "multiLineString" : "",
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "startTime" : "aeiou",
    "id" : 123,
    "roadDisruptionId" : "aeiou",
    "endTime" : "aeiou",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "startDateTime" : "2000-01-23T04:56:07.000+00:00",
  "roadDisruptionImpactAreas" : [ {
    "polygon" : "",
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "startTime" : "aeiou",
    "id" : 123,
    "roadDisruptionId" : "aeiou",
    "endTime" : "aeiou",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "publishEndDate" : "2000-01-23T04:56:07.000+00:00",
  "location" : "aeiou",
  "geometry" : "",
  "category" : "aeiou",
  "ordinal" : 123,
  "status" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <id>string</id>
  <url>string</url>
  <point>string</point>
  <severity>string</severity>
  <ordinal>0</ordinal>
  <category>string</category>
  <subCategory>string</subCategory>
  <comments>string</comments>
  <currentUpdate>string</currentUpdate>
  <currentUpdateDateTime>2000-01-23T04:56:07.000Z</currentUpdateDateTime>
  <corridorIds>string</corridorIds>
  <startDateTime>2000-01-23T04:56:07.000Z</startDateTime>
  <endDateTime>2000-01-23T04:56:07.000Z</endDateTime>
  <lastModifiedTime>2000-01-23T04:56:07.000Z</lastModifiedTime>
  <levelOfInterest>string</levelOfInterest>
  <location>string</location>
  <status>string</status>
  <isProvisional>true</isProvisional>
  <hasClosures>true</hasClosures>
  <linkText>string</linkText>
  <linkUrl>string</linkUrl>
  <publishStartDate>2000-01-23T04:56:07.000Z</publishStartDate>
  <publishEndDate>2000-01-23T04:56:07.000Z</publishEndDate>
  <timeFrame>string</timeFrame>
</null>}]
     
     - parameter disruptionIds: (path) Comma-separated list of disruption identifiers to filter by. 
     - parameter stripContent: (query) Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. (optional)

     - returns: RequestBuilder<RoadDisruption> 
     */
    open class func roadDisruptionByIdWithRequestBuilder(disruptionIds: [String], stripContent: Bool? = nil) -> RequestBuilder<RoadDisruption> {
        var path = "/Road/all/Disruption/{disruptionIds}"
        path = path.replacingOccurrences(of: "{disruptionIds}", with: "\(disruptionIds)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "stripContent": stripContent
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RoadDisruption>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets all roads managed by TfL
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roadGet(completion: @escaping ((_ data: [RoadCorridor]?,_ error: Error?) -> Void)) {
        roadGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets all roads managed by TfL
     - GET /Road
     - examples: [{contentType=application/json, example=[ {
  "statusSeverityDescription" : "aeiou",
  "envelope" : "aeiou",
  "statusAggregationEndDate" : "2000-01-23T04:56:07.000+00:00",
  "statusAggregationStartDate" : "2000-01-23T04:56:07.000+00:00",
  "displayName" : "aeiou",
  "statusSeverity" : "aeiou",
  "bounds" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "group" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <displayName>string</displayName>
  <group>string</group>
  <statusSeverity>string</statusSeverity>
  <statusSeverityDescription>string</statusSeverityDescription>
  <bounds>string</bounds>
  <envelope>string</envelope>
  <statusAggregationStartDate>2000-01-23T04:56:07.000Z</statusAggregationStartDate>
  <statusAggregationEndDate>2000-01-23T04:56:07.000Z</statusAggregationEndDate>
  <url>string</url>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "statusSeverityDescription" : "aeiou",
  "envelope" : "aeiou",
  "statusAggregationEndDate" : "2000-01-23T04:56:07.000+00:00",
  "statusAggregationStartDate" : "2000-01-23T04:56:07.000+00:00",
  "displayName" : "aeiou",
  "statusSeverity" : "aeiou",
  "bounds" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "group" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <displayName>string</displayName>
  <group>string</group>
  <statusSeverity>string</statusSeverity>
  <statusSeverityDescription>string</statusSeverityDescription>
  <bounds>string</bounds>
  <envelope>string</envelope>
  <statusAggregationStartDate>2000-01-23T04:56:07.000Z</statusAggregationStartDate>
  <statusAggregationEndDate>2000-01-23T04:56:07.000Z</statusAggregationEndDate>
  <url>string</url>
</null>}]

     - returns: RequestBuilder<[RoadCorridor]> 
     */
    open class func roadGetWithRequestBuilder() -> RequestBuilder<[RoadCorridor]> {
        let path = "/Road"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[RoadCorridor]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets the road with the specified id (e.g. A1)
     
     - parameter ids: (path) Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roadGet_0(ids: [String], completion: @escaping ((_ data: [RoadCorridor]?,_ error: Error?) -> Void)) {
        roadGet_0WithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets the road with the specified id (e.g. A1)
     - GET /Road/{ids}
     - examples: [{contentType=application/json, example=[ {
  "statusSeverityDescription" : "aeiou",
  "envelope" : "aeiou",
  "statusAggregationEndDate" : "2000-01-23T04:56:07.000+00:00",
  "statusAggregationStartDate" : "2000-01-23T04:56:07.000+00:00",
  "displayName" : "aeiou",
  "statusSeverity" : "aeiou",
  "bounds" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "group" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <displayName>string</displayName>
  <group>string</group>
  <statusSeverity>string</statusSeverity>
  <statusSeverityDescription>string</statusSeverityDescription>
  <bounds>string</bounds>
  <envelope>string</envelope>
  <statusAggregationStartDate>2000-01-23T04:56:07.000Z</statusAggregationStartDate>
  <statusAggregationEndDate>2000-01-23T04:56:07.000Z</statusAggregationEndDate>
  <url>string</url>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "statusSeverityDescription" : "aeiou",
  "envelope" : "aeiou",
  "statusAggregationEndDate" : "2000-01-23T04:56:07.000+00:00",
  "statusAggregationStartDate" : "2000-01-23T04:56:07.000+00:00",
  "displayName" : "aeiou",
  "statusSeverity" : "aeiou",
  "bounds" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "group" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <displayName>string</displayName>
  <group>string</group>
  <statusSeverity>string</statusSeverity>
  <statusSeverityDescription>string</statusSeverityDescription>
  <bounds>string</bounds>
  <envelope>string</envelope>
  <statusAggregationStartDate>2000-01-23T04:56:07.000Z</statusAggregationStartDate>
  <statusAggregationEndDate>2000-01-23T04:56:07.000Z</statusAggregationEndDate>
  <url>string</url>
</null>}]
     
     - parameter ids: (path) Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; (a full list of supported road identifiers can be found at the /Road/ endpoint) 

     - returns: RequestBuilder<[RoadCorridor]> 
     */
    open class func roadGet_0WithRequestBuilder(ids: [String]) -> RequestBuilder<[RoadCorridor]> {
        var path = "/Road/{ids}"
        path = path.replacingOccurrences(of: "{ids}", with: "\(ids)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[RoadCorridor]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets a list of valid RoadDisruption categories
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roadMetaCategories(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        roadMetaCategoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a list of valid RoadDisruption categories
     - GET /Road/Meta/Categories
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=string}]
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=string}]

     - returns: RequestBuilder<[String]> 
     */
    open class func roadMetaCategoriesWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/Road/Meta/Categories"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets a list of valid RoadDisruption severity codes
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roadMetaSeverities(completion: @escaping ((_ data: [StatusSeverity]?,_ error: Error?) -> Void)) {
        roadMetaSeveritiesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a list of valid RoadDisruption severity codes
     - GET /Road/Meta/Severities
     - examples: [{contentType=application/json, example=[ {
  "severityLevel" : 123,
  "modeName" : "aeiou",
  "description" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <modeName>string</modeName>
  <severityLevel>0</severityLevel>
  <description>string</description>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "severityLevel" : 123,
  "modeName" : "aeiou",
  "description" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <modeName>string</modeName>
  <severityLevel>0</severityLevel>
  <description>string</description>
</null>}]

     - returns: RequestBuilder<[StatusSeverity]> 
     */
    open class func roadMetaSeveritiesWithRequestBuilder() -> RequestBuilder<[StatusSeverity]> {
        let path = "/Road/Meta/Severities"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[StatusSeverity]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
     
     - parameter ids: (path) Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) 
     - parameter dateRangeNullableStartDate: (query)  (optional)
     - parameter dateRangeNullableEndDate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roadStatus(ids: [String], dateRangeNullableStartDate: Date? = nil, dateRangeNullableEndDate: Date? = nil, completion: @escaping ((_ data: [RoadCorridor]?,_ error: Error?) -> Void)) {
        roadStatusWithRequestBuilder(ids: ids, dateRangeNullableStartDate: dateRangeNullableStartDate, dateRangeNullableEndDate: dateRangeNullableEndDate).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
     - GET /Road/{ids}/Status
     - examples: [{contentType=application/json, example=[ {
  "statusSeverityDescription" : "aeiou",
  "envelope" : "aeiou",
  "statusAggregationEndDate" : "2000-01-23T04:56:07.000+00:00",
  "statusAggregationStartDate" : "2000-01-23T04:56:07.000+00:00",
  "displayName" : "aeiou",
  "statusSeverity" : "aeiou",
  "bounds" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "group" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <displayName>string</displayName>
  <group>string</group>
  <statusSeverity>string</statusSeverity>
  <statusSeverityDescription>string</statusSeverityDescription>
  <bounds>string</bounds>
  <envelope>string</envelope>
  <statusAggregationStartDate>2000-01-23T04:56:07.000Z</statusAggregationStartDate>
  <statusAggregationEndDate>2000-01-23T04:56:07.000Z</statusAggregationEndDate>
  <url>string</url>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "statusSeverityDescription" : "aeiou",
  "envelope" : "aeiou",
  "statusAggregationEndDate" : "2000-01-23T04:56:07.000+00:00",
  "statusAggregationStartDate" : "2000-01-23T04:56:07.000+00:00",
  "displayName" : "aeiou",
  "statusSeverity" : "aeiou",
  "bounds" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "group" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <displayName>string</displayName>
  <group>string</group>
  <statusSeverity>string</statusSeverity>
  <statusSeverityDescription>string</statusSeverityDescription>
  <bounds>string</bounds>
  <envelope>string</envelope>
  <statusAggregationStartDate>2000-01-23T04:56:07.000Z</statusAggregationStartDate>
  <statusAggregationEndDate>2000-01-23T04:56:07.000Z</statusAggregationEndDate>
  <url>string</url>
</null>}]
     
     - parameter ids: (path) Comma-separated list of road identifiers e.g. \&quot;A406, A2\&quot; or use \&quot;all\&quot; to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) 
     - parameter dateRangeNullableStartDate: (query)  (optional)
     - parameter dateRangeNullableEndDate: (query)  (optional)

     - returns: RequestBuilder<[RoadCorridor]> 
     */
    open class func roadStatusWithRequestBuilder(ids: [String], dateRangeNullableStartDate: Date? = nil, dateRangeNullableEndDate: Date? = nil) -> RequestBuilder<[RoadCorridor]> {
        var path = "/Road/{ids}/Status"
        path = path.replacingOccurrences(of: "{ids}", with: "\(ids)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "dateRangeNullable.startDate": dateRangeNullableStartDate?.encodeToJSON(),
            "dateRangeNullable.endDate": dateRangeNullableEndDate?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[RoadCorridor]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
