//
// StopPointAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class StopPointAPI: APIBase {
    /**
     Gets the list of arrival predictions for the given stop point id
     
     - parameter id: (path) A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointArrivals(id: String, completion: @escaping ((_ data: [Prediction]?,_ error: Error?) -> Void)) {
        stopPointArrivalsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets the list of arrival predictions for the given stop point id
     - GET /StopPoint/{id}/Arrivals
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "bearing" : "aeiou",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "aeiou",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "destinationNaptanId" : "aeiou",
  "towards" : "aeiou",
  "currentLocation" : "aeiou",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "aeiou",
  "destinationName" : "aeiou",
  "operationType" : 123,
  "stationName" : "aeiou",
  "id" : "aeiou",
  "vehicleId" : "aeiou",
  "platformName" : "aeiou",
  "timeToStation" : 123,
  "direction" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <operationType>0</operationType>
  <vehicleId>string</vehicleId>
  <naptanId>string</naptanId>
  <stationName>string</stationName>
  <lineId>string</lineId>
  <lineName>string</lineName>
  <platformName>string</platformName>
  <direction>string</direction>
  <bearing>string</bearing>
  <destinationNaptanId>string</destinationNaptanId>
  <destinationName>string</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>0</timeToStation>
  <currentLocation>string</currentLocation>
  <towards>string</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>string</modeName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "bearing" : "aeiou",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "aeiou",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "destinationNaptanId" : "aeiou",
  "towards" : "aeiou",
  "currentLocation" : "aeiou",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "aeiou",
  "destinationName" : "aeiou",
  "operationType" : 123,
  "stationName" : "aeiou",
  "id" : "aeiou",
  "vehicleId" : "aeiou",
  "platformName" : "aeiou",
  "timeToStation" : 123,
  "direction" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>string</id>
  <operationType>0</operationType>
  <vehicleId>string</vehicleId>
  <naptanId>string</naptanId>
  <stationName>string</stationName>
  <lineId>string</lineId>
  <lineName>string</lineName>
  <platformName>string</platformName>
  <direction>string</direction>
  <bearing>string</bearing>
  <destinationNaptanId>string</destinationNaptanId>
  <destinationName>string</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>0</timeToStation>
  <currentLocation>string</currentLocation>
  <towards>string</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>string</modeName>
</null>}]
     
     - parameter id: (path) A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 

     - returns: RequestBuilder<[Prediction]> 
     */
    open class func stopPointArrivalsWithRequestBuilder(id: String) -> RequestBuilder<[Prediction]> {
        var path = "/StopPoint/{id}/Arrivals"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Prediction]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns the canonical direction, \"inbound\" or \"outbound\", for a given pair of stop point Ids in the direction from -&gt; to.
     
     - parameter id: (path) Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter toStopPointId: (path) Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter lineId: (query) Optional line id filter e.g. victoria (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointDirection(id: String, toStopPointId: String, lineId: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        stopPointDirectionWithRequestBuilder(id: id, toStopPointId: toStopPointId, lineId: lineId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Returns the canonical direction, \"inbound\" or \"outbound\", for a given pair of stop point Ids in the direction from -&gt; to.
     - GET /StopPoint/{id}/DirectionTo/{toStopPointId}
     - examples: [{contentType=application/json, example="aeiou"}, {contentType=application/xml, example=string}]
     - examples: [{contentType=application/json, example="aeiou"}, {contentType=application/xml, example=string}]
     
     - parameter id: (path) Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter toStopPointId: (path) Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter lineId: (query) Optional line id filter e.g. victoria (optional)

     - returns: RequestBuilder<String> 
     */
    open class func stopPointDirectionWithRequestBuilder(id: String, toStopPointId: String, lineId: String? = nil) -> RequestBuilder<String> {
        var path = "/StopPoint/{id}/DirectionTo/{toStopPointId}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{toStopPointId}", with: "\(toStopPointId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "lineId": lineId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
     
     - parameter ids: (path) A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. 
     - parameter getFamily: (query) Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)
     - parameter includeRouteBlockedStops: (query)  (optional)
     - parameter flattenResponse: (query) Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointDisruption(ids: [String], getFamily: Bool? = nil, includeRouteBlockedStops: Bool? = nil, flattenResponse: Bool? = nil, completion: @escaping ((_ data: [DisruptedPoint]?,_ error: Error?) -> Void)) {
        stopPointDisruptionWithRequestBuilder(ids: ids, getFamily: getFamily, includeRouteBlockedStops: includeRouteBlockedStops, flattenResponse: flattenResponse).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
     - GET /StopPoint/{ids}/Disruption
     - examples: [{contentType=application/json, example=[ {
  "fromDate" : "2000-01-23T04:56:07.000+00:00",
  "mode" : "aeiou",
  "commonName" : "aeiou",
  "additionalInformation" : "aeiou",
  "appearance" : "aeiou",
  "toDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "atcoCode" : "aeiou",
  "type" : "aeiou",
  "stationAtcoCode" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <atcoCode>string</atcoCode>
  <fromDate>2000-01-23T04:56:07.000Z</fromDate>
  <toDate>2000-01-23T04:56:07.000Z</toDate>
  <description>string</description>
  <commonName>string</commonName>
  <type>string</type>
  <mode>string</mode>
  <stationAtcoCode>string</stationAtcoCode>
  <appearance>string</appearance>
  <additionalInformation>string</additionalInformation>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "fromDate" : "2000-01-23T04:56:07.000+00:00",
  "mode" : "aeiou",
  "commonName" : "aeiou",
  "additionalInformation" : "aeiou",
  "appearance" : "aeiou",
  "toDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "atcoCode" : "aeiou",
  "type" : "aeiou",
  "stationAtcoCode" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <atcoCode>string</atcoCode>
  <fromDate>2000-01-23T04:56:07.000Z</fromDate>
  <toDate>2000-01-23T04:56:07.000Z</toDate>
  <description>string</description>
  <commonName>string</commonName>
  <type>string</type>
  <mode>string</mode>
  <stationAtcoCode>string</stationAtcoCode>
  <appearance>string</appearance>
  <additionalInformation>string</additionalInformation>
</null>}]
     
     - parameter ids: (path) A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. 
     - parameter getFamily: (query) Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)
     - parameter includeRouteBlockedStops: (query)  (optional)
     - parameter flattenResponse: (query) Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)

     - returns: RequestBuilder<[DisruptedPoint]> 
     */
    open class func stopPointDisruptionWithRequestBuilder(ids: [String], getFamily: Bool? = nil, includeRouteBlockedStops: Bool? = nil, flattenResponse: Bool? = nil) -> RequestBuilder<[DisruptedPoint]> {
        var path = "/StopPoint/{ids}/Disruption"
        path = path.replacingOccurrences(of: "{ids}", with: "\(ids)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "getFamily": getFamily,
            "includeRouteBlockedStops": includeRouteBlockedStops,
            "flattenResponse": flattenResponse
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[DisruptedPoint]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets a distinct list of disrupted stop points for the given modes
     
     - parameter modes: (path) A comma-seperated list of modes e.g. tube,dlr 
     - parameter includeRouteBlockedStops: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointDisruptionByMode(modes: [String], includeRouteBlockedStops: Bool? = nil, completion: @escaping ((_ data: [DisruptedPoint]?,_ error: Error?) -> Void)) {
        stopPointDisruptionByModeWithRequestBuilder(modes: modes, includeRouteBlockedStops: includeRouteBlockedStops).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a distinct list of disrupted stop points for the given modes
     - GET /StopPoint/Mode/{modes}/Disruption
     - examples: [{contentType=application/json, example=[ {
  "fromDate" : "2000-01-23T04:56:07.000+00:00",
  "mode" : "aeiou",
  "commonName" : "aeiou",
  "additionalInformation" : "aeiou",
  "appearance" : "aeiou",
  "toDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "atcoCode" : "aeiou",
  "type" : "aeiou",
  "stationAtcoCode" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <atcoCode>string</atcoCode>
  <fromDate>2000-01-23T04:56:07.000Z</fromDate>
  <toDate>2000-01-23T04:56:07.000Z</toDate>
  <description>string</description>
  <commonName>string</commonName>
  <type>string</type>
  <mode>string</mode>
  <stationAtcoCode>string</stationAtcoCode>
  <appearance>string</appearance>
  <additionalInformation>string</additionalInformation>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "fromDate" : "2000-01-23T04:56:07.000+00:00",
  "mode" : "aeiou",
  "commonName" : "aeiou",
  "additionalInformation" : "aeiou",
  "appearance" : "aeiou",
  "toDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "atcoCode" : "aeiou",
  "type" : "aeiou",
  "stationAtcoCode" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <atcoCode>string</atcoCode>
  <fromDate>2000-01-23T04:56:07.000Z</fromDate>
  <toDate>2000-01-23T04:56:07.000Z</toDate>
  <description>string</description>
  <commonName>string</commonName>
  <type>string</type>
  <mode>string</mode>
  <stationAtcoCode>string</stationAtcoCode>
  <appearance>string</appearance>
  <additionalInformation>string</additionalInformation>
</null>}]
     
     - parameter modes: (path) A comma-seperated list of modes e.g. tube,dlr 
     - parameter includeRouteBlockedStops: (query)  (optional)

     - returns: RequestBuilder<[DisruptedPoint]> 
     */
    open class func stopPointDisruptionByModeWithRequestBuilder(modes: [String], includeRouteBlockedStops: Bool? = nil) -> RequestBuilder<[DisruptedPoint]> {
        var path = "/StopPoint/Mode/{modes}/Disruption"
        path = path.replacingOccurrences(of: "{modes}", with: "\(modes)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "includeRouteBlockedStops": includeRouteBlockedStops
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[DisruptedPoint]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets a list of StopPoints corresponding to the given list of stop ids.
     
     - parameter ids: (path) A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointGet(ids: [String], completion: @escaping ((_ data: [StopPoint]?,_ error: Error?) -> Void)) {
        stopPointGetWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a list of StopPoints corresponding to the given list of stop ids.
     - GET /StopPoint/{ids}
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "aeiou",
  "commonName" : "aeiou",
  "modes" : [ "aeiou" ],
  "distance" : 1.3579000000000001069366817318950779736042022705078125,
  "smsCode" : "aeiou",
  "lon" : 1.3579000000000001069366817318950779736042022705078125,
  "children" : [ {
    "commonName" : "aeiou",
    "placeType" : "aeiou",
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ "" ],
    "childrenUrls" : [ "aeiou" ],
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "additionalProperties" : [ "" ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "hubNaptanCode" : "aeiou",
  "stopLetter" : "aeiou",
  "id" : "aeiou",
  "platformName" : "aeiou",
  "lines" : [ {
    "name" : "aeiou",
    "fullName" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "uri" : "aeiou"
  } ],
  "lat" : 1.3579000000000001069366817318950779736042022705078125,
  "lineModeGroups" : [ {
    "modeName" : "aeiou",
    "lineIdentifier" : [ "aeiou" ]
  } ],
  "childrenUrls" : [ "aeiou" ],
  "stationNaptan" : "aeiou",
  "fullName" : "aeiou",
  "stopType" : "aeiou",
  "naptanMode" : "aeiou",
  "url" : "aeiou",
  "placeType" : "aeiou",
  "naptanId" : "aeiou",
  "icsCode" : "aeiou",
  "lineGroup" : [ {
    "naptanIdReference" : "aeiou",
    "lineIdentifier" : [ "aeiou" ],
    "stationAtcoCode" : "aeiou"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou"
  } ],
  "accessibilitySummary" : "aeiou",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>string</naptanId>
  <platformName>string</platformName>
  <indicator>string</indicator>
  <stopLetter>string</stopLetter>
  <modes>string</modes>
  <icsCode>string</icsCode>
  <smsCode>string</smsCode>
  <stopType>string</stopType>
  <stationNaptan>string</stationNaptan>
  <accessibilitySummary>string</accessibilitySummary>
  <hubNaptanCode>string</hubNaptanCode>
  <fullName>string</fullName>
  <naptanMode>string</naptanMode>
  <status>true</status>
  <id>string</id>
  <url>string</url>
  <commonName>string</commonName>
  <distance>not implemented io.swagger.models.properties.DoubleProperty@e4b875bb</distance>
  <placeType>string</placeType>
  <childrenUrls>string</childrenUrls>
  <lat>not implemented io.swagger.models.properties.DoubleProperty@1372e374</lat>
  <lon>not implemented io.swagger.models.properties.DoubleProperty@8032f2d5</lon>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "aeiou",
  "commonName" : "aeiou",
  "modes" : [ "aeiou" ],
  "distance" : 1.3579000000000001069366817318950779736042022705078125,
  "smsCode" : "aeiou",
  "lon" : 1.3579000000000001069366817318950779736042022705078125,
  "children" : [ {
    "commonName" : "aeiou",
    "placeType" : "aeiou",
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ "" ],
    "childrenUrls" : [ "aeiou" ],
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "additionalProperties" : [ "" ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "hubNaptanCode" : "aeiou",
  "stopLetter" : "aeiou",
  "id" : "aeiou",
  "platformName" : "aeiou",
  "lines" : [ {
    "name" : "aeiou",
    "fullName" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "uri" : "aeiou"
  } ],
  "lat" : 1.3579000000000001069366817318950779736042022705078125,
  "lineModeGroups" : [ {
    "modeName" : "aeiou",
    "lineIdentifier" : [ "aeiou" ]
  } ],
  "childrenUrls" : [ "aeiou" ],
  "stationNaptan" : "aeiou",
  "fullName" : "aeiou",
  "stopType" : "aeiou",
  "naptanMode" : "aeiou",
  "url" : "aeiou",
  "placeType" : "aeiou",
  "naptanId" : "aeiou",
  "icsCode" : "aeiou",
  "lineGroup" : [ {
    "naptanIdReference" : "aeiou",
    "lineIdentifier" : [ "aeiou" ],
    "stationAtcoCode" : "aeiou"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou"
  } ],
  "accessibilitySummary" : "aeiou",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>string</naptanId>
  <platformName>string</platformName>
  <indicator>string</indicator>
  <stopLetter>string</stopLetter>
  <modes>string</modes>
  <icsCode>string</icsCode>
  <smsCode>string</smsCode>
  <stopType>string</stopType>
  <stationNaptan>string</stationNaptan>
  <accessibilitySummary>string</accessibilitySummary>
  <hubNaptanCode>string</hubNaptanCode>
  <fullName>string</fullName>
  <naptanMode>string</naptanMode>
  <status>true</status>
  <id>string</id>
  <url>string</url>
  <commonName>string</commonName>
  <distance>not implemented io.swagger.models.properties.DoubleProperty@e4b875bb</distance>
  <placeType>string</placeType>
  <childrenUrls>string</childrenUrls>
  <lat>not implemented io.swagger.models.properties.DoubleProperty@1372e374</lat>
  <lon>not implemented io.swagger.models.properties.DoubleProperty@8032f2d5</lon>
</null>}]
     
     - parameter ids: (path) A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. 

     - returns: RequestBuilder<[StopPoint]> 
     */
    open class func stopPointGetWithRequestBuilder(ids: [String]) -> RequestBuilder<[StopPoint]> {
        var path = "/StopPoint/{ids}"
        path = path.replacingOccurrences(of: "{ids}", with: "\(ids)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[StopPoint]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets a list of StopPoints within {radius} by the specified criteria
     
     - parameter stopTypes: (query) a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint) 
     - parameter locationLat: (query)  
     - parameter locationLon: (query)  
     - parameter radius: (query) the radius of the bounding circle in metres (default : 200) (optional)
     - parameter useStopPointHierarchy: (query) Re-arrange the output into a parent/child hierarchy (optional)
     - parameter modes: (query) the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)
     - parameter categories: (query) an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)
     - parameter returnLines: (query) true to return the lines that each stop point serves as a nested resource (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointGetByGeoPoint(stopTypes: [String], locationLat: Double, locationLon: Double, radius: Int32? = nil, useStopPointHierarchy: Bool? = nil, modes: [String]? = nil, categories: [String]? = nil, returnLines: Bool? = nil, completion: @escaping ((_ data: StopPointsResponse?,_ error: Error?) -> Void)) {
        stopPointGetByGeoPointWithRequestBuilder(stopTypes: stopTypes, locationLat: locationLat, locationLon: locationLon, radius: radius, useStopPointHierarchy: useStopPointHierarchy, modes: modes, categories: categories, returnLines: returnLines).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a list of StopPoints within {radius} by the specified criteria
     - GET /StopPoint
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "centrePoint" : [ 1.3579000000000001069366817318950779736042022705078125 ],
  "stopPoints" : [ {
    "indicator" : "aeiou",
    "commonName" : "aeiou",
    "modes" : [ "aeiou" ],
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "smsCode" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ {
      "commonName" : "aeiou",
      "placeType" : "aeiou",
      "distance" : 1.3579000000000001069366817318950779736042022705078125,
      "children" : [ "" ],
      "childrenUrls" : [ "aeiou" ],
      "lon" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "additionalProperties" : [ "" ],
      "url" : "aeiou",
      "lat" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "hubNaptanCode" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "platformName" : "aeiou",
    "lines" : [ {
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "lineModeGroups" : [ {
      "modeName" : "aeiou",
      "lineIdentifier" : [ "aeiou" ]
    } ],
    "childrenUrls" : [ "aeiou" ],
    "stationNaptan" : "aeiou",
    "fullName" : "aeiou",
    "stopType" : "aeiou",
    "naptanMode" : "aeiou",
    "url" : "aeiou",
    "placeType" : "aeiou",
    "naptanId" : "aeiou",
    "icsCode" : "aeiou",
    "lineGroup" : [ {
      "naptanIdReference" : "aeiou",
      "lineIdentifier" : [ "aeiou" ],
      "stationAtcoCode" : "aeiou"
    } ],
    "additionalProperties" : [ {
      "sourceSystemKey" : "aeiou",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "aeiou",
      "value" : "aeiou",
      "key" : "aeiou"
    } ],
    "accessibilitySummary" : "aeiou",
    "status" : true
  } ],
  "pageSize" : 123,
  "page" : 123
}}, {contentType=application/xml, example=<null>
  <centrePoint>not implemented io.swagger.models.properties.DoubleProperty@6e01b9a8</centrePoint>
  <pageSize>0</pageSize>
  <total>0</total>
  <page>0</page>
</null>}]
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "centrePoint" : [ 1.3579000000000001069366817318950779736042022705078125 ],
  "stopPoints" : [ {
    "indicator" : "aeiou",
    "commonName" : "aeiou",
    "modes" : [ "aeiou" ],
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "smsCode" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ {
      "commonName" : "aeiou",
      "placeType" : "aeiou",
      "distance" : 1.3579000000000001069366817318950779736042022705078125,
      "children" : [ "" ],
      "childrenUrls" : [ "aeiou" ],
      "lon" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "additionalProperties" : [ "" ],
      "url" : "aeiou",
      "lat" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "hubNaptanCode" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "platformName" : "aeiou",
    "lines" : [ {
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "lineModeGroups" : [ {
      "modeName" : "aeiou",
      "lineIdentifier" : [ "aeiou" ]
    } ],
    "childrenUrls" : [ "aeiou" ],
    "stationNaptan" : "aeiou",
    "fullName" : "aeiou",
    "stopType" : "aeiou",
    "naptanMode" : "aeiou",
    "url" : "aeiou",
    "placeType" : "aeiou",
    "naptanId" : "aeiou",
    "icsCode" : "aeiou",
    "lineGroup" : [ {
      "naptanIdReference" : "aeiou",
      "lineIdentifier" : [ "aeiou" ],
      "stationAtcoCode" : "aeiou"
    } ],
    "additionalProperties" : [ {
      "sourceSystemKey" : "aeiou",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "aeiou",
      "value" : "aeiou",
      "key" : "aeiou"
    } ],
    "accessibilitySummary" : "aeiou",
    "status" : true
  } ],
  "pageSize" : 123,
  "page" : 123
}}, {contentType=application/xml, example=<null>
  <centrePoint>not implemented io.swagger.models.properties.DoubleProperty@6e01b9a8</centrePoint>
  <pageSize>0</pageSize>
  <total>0</total>
  <page>0</page>
</null>}]
     
     - parameter stopTypes: (query) a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint) 
     - parameter locationLat: (query)  
     - parameter locationLon: (query)  
     - parameter radius: (query) the radius of the bounding circle in metres (default : 200) (optional)
     - parameter useStopPointHierarchy: (query) Re-arrange the output into a parent/child hierarchy (optional)
     - parameter modes: (query) the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)
     - parameter categories: (query) an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)
     - parameter returnLines: (query) true to return the lines that each stop point serves as a nested resource (optional)

     - returns: RequestBuilder<StopPointsResponse> 
     */
    open class func stopPointGetByGeoPointWithRequestBuilder(stopTypes: [String], locationLat: Double, locationLon: Double, radius: Int32? = nil, useStopPointHierarchy: Bool? = nil, modes: [String]? = nil, categories: [String]? = nil, returnLines: Bool? = nil) -> RequestBuilder<StopPointsResponse> {
        let path = "/StopPoint"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "stopTypes": stopTypes,
            "radius": radius?.encodeToJSON(),
            "useStopPointHierarchy": useStopPointHierarchy,
            "modes": modes,
            "categories": categories,
            "returnLines": returnLines,
            "location.lat": locationLat,
            "location.lon": locationLon
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StopPointsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets a list of StopPoints filtered by the modes available at that StopPoint.
     
     - parameter modes: (path) A comma-seperated list of modes e.g. tube,dlr 
     - parameter page: (query) The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointGetByMode(modes: [String], page: Int32? = nil, completion: @escaping ((_ data: StopPointsResponse?,_ error: Error?) -> Void)) {
        stopPointGetByModeWithRequestBuilder(modes: modes, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a list of StopPoints filtered by the modes available at that StopPoint.
     - GET /StopPoint/Mode/{modes}
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "centrePoint" : [ 1.3579000000000001069366817318950779736042022705078125 ],
  "stopPoints" : [ {
    "indicator" : "aeiou",
    "commonName" : "aeiou",
    "modes" : [ "aeiou" ],
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "smsCode" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ {
      "commonName" : "aeiou",
      "placeType" : "aeiou",
      "distance" : 1.3579000000000001069366817318950779736042022705078125,
      "children" : [ "" ],
      "childrenUrls" : [ "aeiou" ],
      "lon" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "additionalProperties" : [ "" ],
      "url" : "aeiou",
      "lat" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "hubNaptanCode" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "platformName" : "aeiou",
    "lines" : [ {
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "lineModeGroups" : [ {
      "modeName" : "aeiou",
      "lineIdentifier" : [ "aeiou" ]
    } ],
    "childrenUrls" : [ "aeiou" ],
    "stationNaptan" : "aeiou",
    "fullName" : "aeiou",
    "stopType" : "aeiou",
    "naptanMode" : "aeiou",
    "url" : "aeiou",
    "placeType" : "aeiou",
    "naptanId" : "aeiou",
    "icsCode" : "aeiou",
    "lineGroup" : [ {
      "naptanIdReference" : "aeiou",
      "lineIdentifier" : [ "aeiou" ],
      "stationAtcoCode" : "aeiou"
    } ],
    "additionalProperties" : [ {
      "sourceSystemKey" : "aeiou",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "aeiou",
      "value" : "aeiou",
      "key" : "aeiou"
    } ],
    "accessibilitySummary" : "aeiou",
    "status" : true
  } ],
  "pageSize" : 123,
  "page" : 123
}}, {contentType=application/xml, example=<null>
  <centrePoint>not implemented io.swagger.models.properties.DoubleProperty@6e01b9a8</centrePoint>
  <pageSize>0</pageSize>
  <total>0</total>
  <page>0</page>
</null>}]
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "centrePoint" : [ 1.3579000000000001069366817318950779736042022705078125 ],
  "stopPoints" : [ {
    "indicator" : "aeiou",
    "commonName" : "aeiou",
    "modes" : [ "aeiou" ],
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "smsCode" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ {
      "commonName" : "aeiou",
      "placeType" : "aeiou",
      "distance" : 1.3579000000000001069366817318950779736042022705078125,
      "children" : [ "" ],
      "childrenUrls" : [ "aeiou" ],
      "lon" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "additionalProperties" : [ "" ],
      "url" : "aeiou",
      "lat" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "hubNaptanCode" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "platformName" : "aeiou",
    "lines" : [ {
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "lineModeGroups" : [ {
      "modeName" : "aeiou",
      "lineIdentifier" : [ "aeiou" ]
    } ],
    "childrenUrls" : [ "aeiou" ],
    "stationNaptan" : "aeiou",
    "fullName" : "aeiou",
    "stopType" : "aeiou",
    "naptanMode" : "aeiou",
    "url" : "aeiou",
    "placeType" : "aeiou",
    "naptanId" : "aeiou",
    "icsCode" : "aeiou",
    "lineGroup" : [ {
      "naptanIdReference" : "aeiou",
      "lineIdentifier" : [ "aeiou" ],
      "stationAtcoCode" : "aeiou"
    } ],
    "additionalProperties" : [ {
      "sourceSystemKey" : "aeiou",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "category" : "aeiou",
      "value" : "aeiou",
      "key" : "aeiou"
    } ],
    "accessibilitySummary" : "aeiou",
    "status" : true
  } ],
  "pageSize" : 123,
  "page" : 123
}}, {contentType=application/xml, example=<null>
  <centrePoint>not implemented io.swagger.models.properties.DoubleProperty@6e01b9a8</centrePoint>
  <pageSize>0</pageSize>
  <total>0</total>
  <page>0</page>
</null>}]
     
     - parameter modes: (path) A comma-seperated list of modes e.g. tube,dlr 
     - parameter page: (query) The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)

     - returns: RequestBuilder<StopPointsResponse> 
     */
    open class func stopPointGetByModeWithRequestBuilder(modes: [String], page: Int32? = nil) -> RequestBuilder<StopPointsResponse> {
        var path = "/StopPoint/Mode/{modes}"
        path = path.replacingOccurrences(of: "{modes}", with: "\(modes)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "page": page?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StopPointsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets a StopPoint for a given sms code.
     
     - parameter id: (path) A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334. 
     - parameter output: (query) If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointGetBySms(id: String, output: String? = nil, completion: @escaping ((_ data: Object?,_ error: Error?) -> Void)) {
        stopPointGetBySmsWithRequestBuilder(id: id, output: output).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a StopPoint for a given sms code.
     - GET /StopPoint/Sms/{id}
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     
     - parameter id: (path) A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334. 
     - parameter output: (query) If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)

     - returns: RequestBuilder<Object> 
     */
    open class func stopPointGetBySmsWithRequestBuilder(id: String, output: String? = nil) -> RequestBuilder<Object> {
        var path = "/StopPoint/Sms/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "output": output
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Object>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets all stop points of a given type
     
     - parameter types: (path) A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointGetByType(types: [String], completion: @escaping ((_ data: [StopPoint]?,_ error: Error?) -> Void)) {
        stopPointGetByTypeWithRequestBuilder(types: types).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets all stop points of a given type
     - GET /StopPoint/Type/{types}
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "aeiou",
  "commonName" : "aeiou",
  "modes" : [ "aeiou" ],
  "distance" : 1.3579000000000001069366817318950779736042022705078125,
  "smsCode" : "aeiou",
  "lon" : 1.3579000000000001069366817318950779736042022705078125,
  "children" : [ {
    "commonName" : "aeiou",
    "placeType" : "aeiou",
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ "" ],
    "childrenUrls" : [ "aeiou" ],
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "additionalProperties" : [ "" ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "hubNaptanCode" : "aeiou",
  "stopLetter" : "aeiou",
  "id" : "aeiou",
  "platformName" : "aeiou",
  "lines" : [ {
    "name" : "aeiou",
    "fullName" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "uri" : "aeiou"
  } ],
  "lat" : 1.3579000000000001069366817318950779736042022705078125,
  "lineModeGroups" : [ {
    "modeName" : "aeiou",
    "lineIdentifier" : [ "aeiou" ]
  } ],
  "childrenUrls" : [ "aeiou" ],
  "stationNaptan" : "aeiou",
  "fullName" : "aeiou",
  "stopType" : "aeiou",
  "naptanMode" : "aeiou",
  "url" : "aeiou",
  "placeType" : "aeiou",
  "naptanId" : "aeiou",
  "icsCode" : "aeiou",
  "lineGroup" : [ {
    "naptanIdReference" : "aeiou",
    "lineIdentifier" : [ "aeiou" ],
    "stationAtcoCode" : "aeiou"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou"
  } ],
  "accessibilitySummary" : "aeiou",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>string</naptanId>
  <platformName>string</platformName>
  <indicator>string</indicator>
  <stopLetter>string</stopLetter>
  <modes>string</modes>
  <icsCode>string</icsCode>
  <smsCode>string</smsCode>
  <stopType>string</stopType>
  <stationNaptan>string</stationNaptan>
  <accessibilitySummary>string</accessibilitySummary>
  <hubNaptanCode>string</hubNaptanCode>
  <fullName>string</fullName>
  <naptanMode>string</naptanMode>
  <status>true</status>
  <id>string</id>
  <url>string</url>
  <commonName>string</commonName>
  <distance>not implemented io.swagger.models.properties.DoubleProperty@e4b875bb</distance>
  <placeType>string</placeType>
  <childrenUrls>string</childrenUrls>
  <lat>not implemented io.swagger.models.properties.DoubleProperty@1372e374</lat>
  <lon>not implemented io.swagger.models.properties.DoubleProperty@8032f2d5</lon>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "aeiou",
  "commonName" : "aeiou",
  "modes" : [ "aeiou" ],
  "distance" : 1.3579000000000001069366817318950779736042022705078125,
  "smsCode" : "aeiou",
  "lon" : 1.3579000000000001069366817318950779736042022705078125,
  "children" : [ {
    "commonName" : "aeiou",
    "placeType" : "aeiou",
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ "" ],
    "childrenUrls" : [ "aeiou" ],
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "additionalProperties" : [ "" ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "hubNaptanCode" : "aeiou",
  "stopLetter" : "aeiou",
  "id" : "aeiou",
  "platformName" : "aeiou",
  "lines" : [ {
    "name" : "aeiou",
    "fullName" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "uri" : "aeiou"
  } ],
  "lat" : 1.3579000000000001069366817318950779736042022705078125,
  "lineModeGroups" : [ {
    "modeName" : "aeiou",
    "lineIdentifier" : [ "aeiou" ]
  } ],
  "childrenUrls" : [ "aeiou" ],
  "stationNaptan" : "aeiou",
  "fullName" : "aeiou",
  "stopType" : "aeiou",
  "naptanMode" : "aeiou",
  "url" : "aeiou",
  "placeType" : "aeiou",
  "naptanId" : "aeiou",
  "icsCode" : "aeiou",
  "lineGroup" : [ {
    "naptanIdReference" : "aeiou",
    "lineIdentifier" : [ "aeiou" ],
    "stationAtcoCode" : "aeiou"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou"
  } ],
  "accessibilitySummary" : "aeiou",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>string</naptanId>
  <platformName>string</platformName>
  <indicator>string</indicator>
  <stopLetter>string</stopLetter>
  <modes>string</modes>
  <icsCode>string</icsCode>
  <smsCode>string</smsCode>
  <stopType>string</stopType>
  <stationNaptan>string</stationNaptan>
  <accessibilitySummary>string</accessibilitySummary>
  <hubNaptanCode>string</hubNaptanCode>
  <fullName>string</fullName>
  <naptanMode>string</naptanMode>
  <status>true</status>
  <id>string</id>
  <url>string</url>
  <commonName>string</commonName>
  <distance>not implemented io.swagger.models.properties.DoubleProperty@e4b875bb</distance>
  <placeType>string</placeType>
  <childrenUrls>string</childrenUrls>
  <lat>not implemented io.swagger.models.properties.DoubleProperty@1372e374</lat>
  <lon>not implemented io.swagger.models.properties.DoubleProperty@8032f2d5</lon>
</null>}]
     
     - parameter types: (path) A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint. 

     - returns: RequestBuilder<[StopPoint]> 
     */
    open class func stopPointGetByTypeWithRequestBuilder(types: [String]) -> RequestBuilder<[StopPoint]> {
        var path = "/StopPoint/Type/{types}"
        path = path.replacingOccurrences(of: "{types}", with: "\(types)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[StopPoint]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets the service types for a given stoppoint
     
     - parameter id: (query) The Naptan id of the stop 
     - parameter lineIds: (query) The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)
     - parameter modes: (query) The modes which the lines are relevant to (all if empty) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointGetServiceTypes(id: String, lineIds: [String]? = nil, modes: [String]? = nil, completion: @escaping ((_ data: [LineServiceType]?,_ error: Error?) -> Void)) {
        stopPointGetServiceTypesWithRequestBuilder(id: id, lineIds: lineIds, modes: modes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets the service types for a given stoppoint
     - GET /StopPoint/ServiceTypes
     - examples: [{contentType=application/json, example=[ {
  "lineSpecificServiceTypes" : [ {
    "serviceType" : {
      "name" : "aeiou",
      "uri" : "aeiou"
    },
    "stopServesServiceType" : true
  } ],
  "lineName" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <lineName>string</lineName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "lineSpecificServiceTypes" : [ {
    "serviceType" : {
      "name" : "aeiou",
      "uri" : "aeiou"
    },
    "stopServesServiceType" : true
  } ],
  "lineName" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <lineName>string</lineName>
</null>}]
     
     - parameter id: (query) The Naptan id of the stop 
     - parameter lineIds: (query) The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)
     - parameter modes: (query) The modes which the lines are relevant to (all if empty) (optional)

     - returns: RequestBuilder<[LineServiceType]> 
     */
    open class func stopPointGetServiceTypesWithRequestBuilder(id: String, lineIds: [String]? = nil, modes: [String]? = nil) -> RequestBuilder<[LineServiceType]> {
        let path = "/StopPoint/ServiceTypes"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "id": id,
            "lineIds": lineIds,
            "modes": modes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[LineServiceType]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets the list of available StopPoint additional information categories
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointMetaCategories(completion: @escaping ((_ data: [StopPointCategory]?,_ error: Error?) -> Void)) {
        stopPointMetaCategoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets the list of available StopPoint additional information categories
     - GET /StopPoint/Meta/Categories
     - examples: [{contentType=application/json, example=[ {
  "category" : "aeiou",
  "availableKeys" : [ "aeiou" ]
} ]}, {contentType=application/xml, example=<null>
  <category>string</category>
  <availableKeys>string</availableKeys>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "category" : "aeiou",
  "availableKeys" : [ "aeiou" ]
} ]}, {contentType=application/xml, example=<null>
  <category>string</category>
  <availableKeys>string</availableKeys>
</null>}]

     - returns: RequestBuilder<[StopPointCategory]> 
     */
    open class func stopPointMetaCategoriesWithRequestBuilder() -> RequestBuilder<[StopPointCategory]> {
        let path = "/StopPoint/Meta/Categories"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[StopPointCategory]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets the list of available StopPoint modes
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointMetaModes(completion: @escaping ((_ data: [Mode]?,_ error: Error?) -> Void)) {
        stopPointMetaModesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets the list of available StopPoint modes
     - GET /StopPoint/Meta/Modes
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "isTflService" : true,
  "isFarePaying" : true,
  "isScheduledService" : true
} ]}, {contentType=application/xml, example=<null>
  <isTflService>true</isTflService>
  <isFarePaying>true</isFarePaying>
  <isScheduledService>true</isScheduledService>
  <modeName>string</modeName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "isTflService" : true,
  "isFarePaying" : true,
  "isScheduledService" : true
} ]}, {contentType=application/xml, example=<null>
  <isTflService>true</isTflService>
  <isFarePaying>true</isFarePaying>
  <isScheduledService>true</isScheduledService>
  <modeName>string</modeName>
</null>}]

     - returns: RequestBuilder<[Mode]> 
     */
    open class func stopPointMetaModesWithRequestBuilder() -> RequestBuilder<[Mode]> {
        let path = "/StopPoint/Meta/Modes"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Mode]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets the list of available StopPoint types
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointMetaStopTypes(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        stopPointMetaStopTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets the list of available StopPoint types
     - GET /StopPoint/Meta/StopTypes
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=string}]
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=string}]

     - returns: RequestBuilder<[String]> 
     */
    open class func stopPointMetaStopTypesWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/StopPoint/Meta/StopTypes"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter serviceTypes
     */
    public enum ServiceTypes_stopPointReachableFrom: String { 
        case regular = "Regular"
        case night = "Night"
    }

    /**
     Gets Stopoints that are reachable from a station/line combination.
     
     - parameter id: (path) The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by 
     - parameter lineId: (path) Line id of the line to filter by (e.g. victoria) 
     - parameter serviceTypes: (query) A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointReachableFrom(id: String, lineId: String, serviceTypes: [String]? = nil, completion: @escaping ((_ data: [StopPoint]?,_ error: Error?) -> Void)) {
        stopPointReachableFromWithRequestBuilder(id: id, lineId: lineId, serviceTypes: serviceTypes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets Stopoints that are reachable from a station/line combination.
     - GET /StopPoint/{id}/CanReachOnLine/{lineId}
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "aeiou",
  "commonName" : "aeiou",
  "modes" : [ "aeiou" ],
  "distance" : 1.3579000000000001069366817318950779736042022705078125,
  "smsCode" : "aeiou",
  "lon" : 1.3579000000000001069366817318950779736042022705078125,
  "children" : [ {
    "commonName" : "aeiou",
    "placeType" : "aeiou",
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ "" ],
    "childrenUrls" : [ "aeiou" ],
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "additionalProperties" : [ "" ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "hubNaptanCode" : "aeiou",
  "stopLetter" : "aeiou",
  "id" : "aeiou",
  "platformName" : "aeiou",
  "lines" : [ {
    "name" : "aeiou",
    "fullName" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "uri" : "aeiou"
  } ],
  "lat" : 1.3579000000000001069366817318950779736042022705078125,
  "lineModeGroups" : [ {
    "modeName" : "aeiou",
    "lineIdentifier" : [ "aeiou" ]
  } ],
  "childrenUrls" : [ "aeiou" ],
  "stationNaptan" : "aeiou",
  "fullName" : "aeiou",
  "stopType" : "aeiou",
  "naptanMode" : "aeiou",
  "url" : "aeiou",
  "placeType" : "aeiou",
  "naptanId" : "aeiou",
  "icsCode" : "aeiou",
  "lineGroup" : [ {
    "naptanIdReference" : "aeiou",
    "lineIdentifier" : [ "aeiou" ],
    "stationAtcoCode" : "aeiou"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou"
  } ],
  "accessibilitySummary" : "aeiou",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>string</naptanId>
  <platformName>string</platformName>
  <indicator>string</indicator>
  <stopLetter>string</stopLetter>
  <modes>string</modes>
  <icsCode>string</icsCode>
  <smsCode>string</smsCode>
  <stopType>string</stopType>
  <stationNaptan>string</stationNaptan>
  <accessibilitySummary>string</accessibilitySummary>
  <hubNaptanCode>string</hubNaptanCode>
  <fullName>string</fullName>
  <naptanMode>string</naptanMode>
  <status>true</status>
  <id>string</id>
  <url>string</url>
  <commonName>string</commonName>
  <distance>not implemented io.swagger.models.properties.DoubleProperty@e4b875bb</distance>
  <placeType>string</placeType>
  <childrenUrls>string</childrenUrls>
  <lat>not implemented io.swagger.models.properties.DoubleProperty@1372e374</lat>
  <lon>not implemented io.swagger.models.properties.DoubleProperty@8032f2d5</lon>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "aeiou",
  "commonName" : "aeiou",
  "modes" : [ "aeiou" ],
  "distance" : 1.3579000000000001069366817318950779736042022705078125,
  "smsCode" : "aeiou",
  "lon" : 1.3579000000000001069366817318950779736042022705078125,
  "children" : [ {
    "commonName" : "aeiou",
    "placeType" : "aeiou",
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ "" ],
    "childrenUrls" : [ "aeiou" ],
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "additionalProperties" : [ "" ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "hubNaptanCode" : "aeiou",
  "stopLetter" : "aeiou",
  "id" : "aeiou",
  "platformName" : "aeiou",
  "lines" : [ {
    "name" : "aeiou",
    "fullName" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "uri" : "aeiou"
  } ],
  "lat" : 1.3579000000000001069366817318950779736042022705078125,
  "lineModeGroups" : [ {
    "modeName" : "aeiou",
    "lineIdentifier" : [ "aeiou" ]
  } ],
  "childrenUrls" : [ "aeiou" ],
  "stationNaptan" : "aeiou",
  "fullName" : "aeiou",
  "stopType" : "aeiou",
  "naptanMode" : "aeiou",
  "url" : "aeiou",
  "placeType" : "aeiou",
  "naptanId" : "aeiou",
  "icsCode" : "aeiou",
  "lineGroup" : [ {
    "naptanIdReference" : "aeiou",
    "lineIdentifier" : [ "aeiou" ],
    "stationAtcoCode" : "aeiou"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou"
  } ],
  "accessibilitySummary" : "aeiou",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>string</naptanId>
  <platformName>string</platformName>
  <indicator>string</indicator>
  <stopLetter>string</stopLetter>
  <modes>string</modes>
  <icsCode>string</icsCode>
  <smsCode>string</smsCode>
  <stopType>string</stopType>
  <stationNaptan>string</stationNaptan>
  <accessibilitySummary>string</accessibilitySummary>
  <hubNaptanCode>string</hubNaptanCode>
  <fullName>string</fullName>
  <naptanMode>string</naptanMode>
  <status>true</status>
  <id>string</id>
  <url>string</url>
  <commonName>string</commonName>
  <distance>not implemented io.swagger.models.properties.DoubleProperty@e4b875bb</distance>
  <placeType>string</placeType>
  <childrenUrls>string</childrenUrls>
  <lat>not implemented io.swagger.models.properties.DoubleProperty@1372e374</lat>
  <lon>not implemented io.swagger.models.properties.DoubleProperty@8032f2d5</lon>
</null>}]
     
     - parameter id: (path) The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by 
     - parameter lineId: (path) Line id of the line to filter by (e.g. victoria) 
     - parameter serviceTypes: (query) A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)

     - returns: RequestBuilder<[StopPoint]> 
     */
    open class func stopPointReachableFromWithRequestBuilder(id: String, lineId: String, serviceTypes: [String]? = nil) -> RequestBuilder<[StopPoint]> {
        var path = "/StopPoint/{id}/CanReachOnLine/{lineId}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lineId}", with: "\(lineId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "serviceTypes": serviceTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[StopPoint]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter serviceTypes
     */
    public enum ServiceTypes_stopPointRoute: String { 
        case regular = "Regular"
        case night = "Night"
    }

    /**
     Returns the route sections for all the lines that service the given stop point ids
     
     - parameter id: (path) A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter serviceTypes: (query) A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointRoute(id: String, serviceTypes: [String]? = nil, completion: @escaping ((_ data: [StopPointRouteSection]?,_ error: Error?) -> Void)) {
        stopPointRouteWithRequestBuilder(id: id, serviceTypes: serviceTypes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Returns the route sections for all the lines that service the given stop point ids
     - GET /StopPoint/{id}/Route
     - examples: [{contentType=application/json, example=[ {
  "mode" : "aeiou",
  "serviceType" : "aeiou",
  "naptanId" : "aeiou",
  "routeSectionName" : "aeiou",
  "destinationName" : "aeiou",
  "lineId" : "aeiou",
  "validFrom" : "2000-01-23T04:56:07.000+00:00",
  "lineString" : "aeiou",
  "isActive" : true,
  "vehicleDestinationText" : "aeiou",
  "validTo" : "2000-01-23T04:56:07.000+00:00",
  "direction" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <naptanId>string</naptanId>
  <lineId>string</lineId>
  <mode>string</mode>
  <validFrom>2000-01-23T04:56:07.000Z</validFrom>
  <validTo>2000-01-23T04:56:07.000Z</validTo>
  <direction>string</direction>
  <routeSectionName>string</routeSectionName>
  <lineString>string</lineString>
  <isActive>true</isActive>
  <serviceType>string</serviceType>
  <vehicleDestinationText>string</vehicleDestinationText>
  <destinationName>string</destinationName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "mode" : "aeiou",
  "serviceType" : "aeiou",
  "naptanId" : "aeiou",
  "routeSectionName" : "aeiou",
  "destinationName" : "aeiou",
  "lineId" : "aeiou",
  "validFrom" : "2000-01-23T04:56:07.000+00:00",
  "lineString" : "aeiou",
  "isActive" : true,
  "vehicleDestinationText" : "aeiou",
  "validTo" : "2000-01-23T04:56:07.000+00:00",
  "direction" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <naptanId>string</naptanId>
  <lineId>string</lineId>
  <mode>string</mode>
  <validFrom>2000-01-23T04:56:07.000Z</validFrom>
  <validTo>2000-01-23T04:56:07.000Z</validTo>
  <direction>string</direction>
  <routeSectionName>string</routeSectionName>
  <lineString>string</lineString>
  <isActive>true</isActive>
  <serviceType>string</serviceType>
  <vehicleDestinationText>string</vehicleDestinationText>
  <destinationName>string</destinationName>
</null>}]
     
     - parameter id: (path) A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter serviceTypes: (query) A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)

     - returns: RequestBuilder<[StopPointRouteSection]> 
     */
    open class func stopPointRouteWithRequestBuilder(id: String, serviceTypes: [String]? = nil) -> RequestBuilder<[StopPointRouteSection]> {
        var path = "/StopPoint/{id}/Route"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "serviceTypes": serviceTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[StopPointRouteSection]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     
     - parameter query: (path) The query string, case-insensitive. Leading and trailing wildcards are applied automatically. 
     - parameter modes: (query) An optional, parameter separated list of the modes to filter by (optional)
     - parameter faresOnly: (query) True to only return stations in that have Fares data available for single fares to another station. (optional)
     - parameter maxResults: (query) An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     - parameter lines: (query) An optional, parameter separated list of the lines to filter by (optional)
     - parameter includeHubs: (query) If true, returns results including HUBs. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointSearch(query: String, modes: [String]? = nil, faresOnly: Bool? = nil, maxResults: Int32? = nil, lines: [String]? = nil, includeHubs: Bool? = nil, completion: @escaping ((_ data: SearchResponse?,_ error: Error?) -> Void)) {
        stopPointSearchWithRequestBuilder(query: query, modes: modes, faresOnly: faresOnly, maxResults: maxResults, lines: lines, includeHubs: includeHubs).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     - GET /StopPoint/Search/{query}
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "provider" : "aeiou",
  "query" : "aeiou",
  "pageSize" : 123,
  "from" : 123,
  "page" : 123,
  "maxScore" : 1.3579000000000001069366817318950779736042022705078125,
  "matches" : [ {
    "name" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <query>string</query>
  <from>0</from>
  <page>0</page>
  <pageSize>0</pageSize>
  <provider>string</provider>
  <total>0</total>
  <maxScore>not implemented io.swagger.models.properties.DoubleProperty@6e01b9a8</maxScore>
</null>}]
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "provider" : "aeiou",
  "query" : "aeiou",
  "pageSize" : 123,
  "from" : 123,
  "page" : 123,
  "maxScore" : 1.3579000000000001069366817318950779736042022705078125,
  "matches" : [ {
    "name" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <query>string</query>
  <from>0</from>
  <page>0</page>
  <pageSize>0</pageSize>
  <provider>string</provider>
  <total>0</total>
  <maxScore>not implemented io.swagger.models.properties.DoubleProperty@6e01b9a8</maxScore>
</null>}]
     
     - parameter query: (path) The query string, case-insensitive. Leading and trailing wildcards are applied automatically. 
     - parameter modes: (query) An optional, parameter separated list of the modes to filter by (optional)
     - parameter faresOnly: (query) True to only return stations in that have Fares data available for single fares to another station. (optional)
     - parameter maxResults: (query) An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     - parameter lines: (query) An optional, parameter separated list of the lines to filter by (optional)
     - parameter includeHubs: (query) If true, returns results including HUBs. (optional)

     - returns: RequestBuilder<SearchResponse> 
     */
    open class func stopPointSearchWithRequestBuilder(query: String, modes: [String]? = nil, faresOnly: Bool? = nil, maxResults: Int32? = nil, lines: [String]? = nil, includeHubs: Bool? = nil) -> RequestBuilder<SearchResponse> {
        var path = "/StopPoint/Search/{query}"
        path = path.replacingOccurrences(of: "{query}", with: "\(query)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "modes": modes,
            "faresOnly": faresOnly,
            "maxResults": maxResults?.encodeToJSON(),
            "lines": lines,
            "includeHubs": includeHubs
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SearchResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     
     - parameter query: (query) The query string, case-insensitive. Leading and trailing wildcards are applied automatically. 
     - parameter modes: (query) An optional, parameter separated list of the modes to filter by (optional)
     - parameter faresOnly: (query) True to only return stations in that have Fares data available for single fares to another station. (optional)
     - parameter maxResults: (query) An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     - parameter lines: (query) An optional, parameter separated list of the lines to filter by (optional)
     - parameter includeHubs: (query) If true, returns results including HUBs. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopPointSearch_0(query: String, modes: [String]? = nil, faresOnly: Bool? = nil, maxResults: Int32? = nil, lines: [String]? = nil, includeHubs: Bool? = nil, completion: @escaping ((_ data: SearchResponse?,_ error: Error?) -> Void)) {
        stopPointSearch_0WithRequestBuilder(query: query, modes: modes, faresOnly: faresOnly, maxResults: maxResults, lines: lines, includeHubs: includeHubs).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     - GET /StopPoint/Search
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "provider" : "aeiou",
  "query" : "aeiou",
  "pageSize" : 123,
  "from" : 123,
  "page" : 123,
  "maxScore" : 1.3579000000000001069366817318950779736042022705078125,
  "matches" : [ {
    "name" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <query>string</query>
  <from>0</from>
  <page>0</page>
  <pageSize>0</pageSize>
  <provider>string</provider>
  <total>0</total>
  <maxScore>not implemented io.swagger.models.properties.DoubleProperty@6e01b9a8</maxScore>
</null>}]
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "provider" : "aeiou",
  "query" : "aeiou",
  "pageSize" : 123,
  "from" : 123,
  "page" : 123,
  "maxScore" : 1.3579000000000001069366817318950779736042022705078125,
  "matches" : [ {
    "name" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <query>string</query>
  <from>0</from>
  <page>0</page>
  <pageSize>0</pageSize>
  <provider>string</provider>
  <total>0</total>
  <maxScore>not implemented io.swagger.models.properties.DoubleProperty@6e01b9a8</maxScore>
</null>}]
     
     - parameter query: (query) The query string, case-insensitive. Leading and trailing wildcards are applied automatically. 
     - parameter modes: (query) An optional, parameter separated list of the modes to filter by (optional)
     - parameter faresOnly: (query) True to only return stations in that have Fares data available for single fares to another station. (optional)
     - parameter maxResults: (query) An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     - parameter lines: (query) An optional, parameter separated list of the lines to filter by (optional)
     - parameter includeHubs: (query) If true, returns results including HUBs. (optional)

     - returns: RequestBuilder<SearchResponse> 
     */
    open class func stopPointSearch_0WithRequestBuilder(query: String, modes: [String]? = nil, faresOnly: Bool? = nil, maxResults: Int32? = nil, lines: [String]? = nil, includeHubs: Bool? = nil) -> RequestBuilder<SearchResponse> {
        let path = "/StopPoint/Search"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "query": query,
            "modes": modes,
            "faresOnly": faresOnly,
            "maxResults": maxResults?.encodeToJSON(),
            "lines": lines,
            "includeHubs": includeHubs
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SearchResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
