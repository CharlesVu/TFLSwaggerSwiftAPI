//
// NotificationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class NotificationAPI: APIBase {
    /**
     Unsubscribes from notifications for a given event.
     
     - parameter id: (path) The id of the subscription to cancel. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationDelete(id: String, completion: @escaping ((_ data: Object?,_ error: Error?) -> Void)) {
        notificationDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Unsubscribes from notifications for a given event.
     - DELETE /Notification/{id}
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     
     - parameter id: (path) The id of the subscription to cancel. 

     - returns: RequestBuilder<Object> 
     */
    open class func notificationDeleteWithRequestBuilder(id: String) -> RequestBuilder<Object> {
        var path = "/Notification/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Object>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets the details of the notification subscription for a given event.
     
     - parameter ids: (path) The id of the subscription. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationGet(ids: String, completion: @escaping ((_ data: NotificationSubscription?,_ error: Error?) -> Void)) {
        notificationGetWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets the details of the notification subscription for a given event.
     - GET /Notification/{ids}
     - examples: [{contentType=application/json, example={
  "callbackVerb" : "aeiou",
  "eventName" : "aeiou",
  "callbackUrl" : "aeiou",
  "useProxy" : true,
  "userName" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <userName>string</userName>
  <eventName>string</eventName>
  <callbackUrl>string</callbackUrl>
  <callbackVerb>string</callbackVerb>
  <useProxy>true</useProxy>
</null>}]
     - examples: [{contentType=application/json, example={
  "callbackVerb" : "aeiou",
  "eventName" : "aeiou",
  "callbackUrl" : "aeiou",
  "useProxy" : true,
  "userName" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <userName>string</userName>
  <eventName>string</eventName>
  <callbackUrl>string</callbackUrl>
  <callbackVerb>string</callbackVerb>
  <useProxy>true</useProxy>
</null>}]
     
     - parameter ids: (path) The id of the subscription. 

     - returns: RequestBuilder<NotificationSubscription> 
     */
    open class func notificationGetWithRequestBuilder(ids: String) -> RequestBuilder<NotificationSubscription> {
        var path = "/Notification/{ids}"
        path = path.replacingOccurrences(of: "{ids}", with: "\(ids)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NotificationSubscription>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets the notification events.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationMeta(completion: @escaping ((_ data: [NotificationEvent]?,_ error: Error?) -> Void)) {
        notificationMetaWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets the notification events.
     - GET /Notification
     - examples: [{contentType=application/json, example=[ {
  "eventName" : "aeiou",
  "notificationParameters" : [ "aeiou" ]
} ]}, {contentType=application/xml, example=<null>
  <eventName>string</eventName>
  <notificationParameters>string</notificationParameters>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "eventName" : "aeiou",
  "notificationParameters" : [ "aeiou" ]
} ]}, {contentType=application/xml, example=<null>
  <eventName>string</eventName>
  <notificationParameters>string</notificationParameters>
</null>}]

     - returns: RequestBuilder<[NotificationEvent]> 
     */
    open class func notificationMetaWithRequestBuilder() -> RequestBuilder<[NotificationEvent]> {
        let path = "/Notification"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[NotificationEvent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Subscribes for notifications of a given event.
     
     - parameter subscription: (body) The subscription. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationPost(subscription: NotificationSubscription, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        notificationPostWithRequestBuilder(subscription: subscription).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Subscribes for notifications of a given event.
     - POST /Notification
     - examples: [{contentType=application/json, example="aeiou"}, {contentType=application/xml, example=string}]
     - examples: [{contentType=application/json, example="aeiou"}, {contentType=application/xml, example=string}]
     
     - parameter subscription: (body) The subscription. 

     - returns: RequestBuilder<String> 
     */
    open class func notificationPostWithRequestBuilder(subscription: NotificationSubscription) -> RequestBuilder<String> {
        let path = "/Notification"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = subscription.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
